{"version":3,"sources":["types/Side.ts","context/Board.tsx","components/Tile.tsx","usefull-fns/Array.tsx","usefull-fns/Object.tsx","types/Pieces.ts","types/Board.ts","designs/pieces/classic/icons/bishop.tsx","designs/pieces/classic/icons/king.tsx","designs/pieces/classic/icons/knight.tsx","designs/pieces/classic/icons/queen.tsx","designs/pieces/classic/icons/pawn.tsx","designs/pieces/classic/icons/rook.tsx","designs/pieces/classic/index.tsx","designs/pieces/classic_outlined/icons/bishop.tsx","designs/pieces/classic_outlined/icons/king.tsx","designs/pieces/classic_outlined/icons/knight.tsx","designs/pieces/classic_outlined/icons/queen.tsx","designs/pieces/classic_outlined/icons/pawn.tsx","designs/pieces/classic_outlined/icons/rook.tsx","designs/pieces/classic_outlined/index.tsx","containers/Board.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SideEnum","BoardContext","createContext","Tile","show_move","tile","variant","piece","size","tile_position","onClick","row","column","on_check","style","children","useContext","console","log","clsx","className","height","width","fontSize","display","justifyContent","alignItems","icon","position","top","background","borderRadius","fillArray","item","obj","arr","i","push","Object","assign","create","getPrototypeOf","Piece","_icon","type","side","hasMoved","location","this","Rook","design","rook","Bishop","bishop","King","king","Queen","queen","Knight","knight","Pawn","pawn","SideClass","pawns","knights","bishops","rooks","capturedPieces","onCheck","capture","getPieces","side_string","TileClass","BishopIcon","props","xmlns","viewBox","d","fillRule","fill","KingIcon","KnightIcon","QueenIcon","PawnIcon","RookIcon","classic","board","sides","moves","tiles","movePiece","prev","next","position_is_out_of_bounds","Error","prev_tile","next_tile","undefined","move","black","is_on_check","white","newGame","set_pawns","kings_column","kings_row","pieces","length","possible_moves","possible_moves_from_tile","j","index","map_piece_to_move","traverse_tiles","action","movablePositions","linear_recursive_scan","ld","linear_scan","radial_scan","column_change","row_change","limit","Infinity","count","new_column","new_row","newPosition","is_out_of_bounds","positions","row_index","index_on_row","row_is_odd","index_is_even","socket","io","Board","useState","game_id","set_game_id","disable_pieces","player_side","set_player_side","tiles_data","set_tiles_data","tiles_jsx","set_tiles_jsx","selected_tile","set_selected_tile","turn_to_play","set_turn_to_play","black_king_on_check","set_black_king_on_check","white_king_on_check","set_white_king_on_check","set_last_played","useEffect","on","id","updateView","turn","tilesDiv","map","tiles_column","validate_king_is_on_check","white_kings_column","white_kings_row","black_kings_column","black_kings_row","transform","event","new_move","emit","next_turn","map_tile_data_to_jsx","boardStyle","gridTemplateColumns","gridTemplateRows","minWidth","minHeight","maxWidth","maxHeight","margin","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.795bb453.chunk.js","sourcesContent":["import { clone } from \"usefull-fns/Object\";\nimport { fillArray } from \"usefull-fns/Array\";\nimport { IDesignPieces } from \"./Design\";\nimport { Bishop, King, Knight, Pawn, Piece, Queen, Rook } from \"./Pieces\";\n\nexport class SideClass {\n  pawns: Pawn[] = [];\n  knights: Knight[] = [];\n  king: King;\n  queen: Queen;\n  bishops: Bishop[] = [];\n  rooks: Rook[] = [];\n  capturedPieces: Piece[] = [];\n  onCheck:boolean = false;\n\n  constructor(design: IDesignPieces, side: number) {\n    let side_string: string = \"white\";\n\n    if (side === 1) {\n      side_string = \"black\";\n    }\n    if (side_string === \"white\") {\n      this.king = new King(design[\"white\"], \"white\");\n      this.queen = new Queen(design[\"white\"], \"white\");\n      this.pawns[0] = new Pawn(design[\"white\"], \"white\");\n      this.pawns[1] = new Pawn(design[\"white\"], \"white\");\n      this.pawns[2] = new Pawn(design[\"white\"], \"white\");\n      this.pawns[3] = new Pawn(design[\"white\"], \"white\");\n      this.pawns[4] = new Pawn(design[\"white\"], \"white\");\n      this.pawns[5] = new Pawn(design[\"white\"], \"white\");\n      this.pawns[6] = new Pawn(design[\"white\"], \"white\");\n      this.pawns[7] = new Pawn(design[\"white\"], \"white\");\n\n      this.knights = fillArray<Pawn>(new Knight(design[\"white\"], \"white\"), 2);\n      this.rooks = fillArray<Pawn>(new Rook(design[\"white\"], \"white\"), 2);\n      this.bishops = fillArray<Pawn>(new Bishop(design[\"white\"], \"white\"), 2);\n    } else {\n      this.king = new King(design[\"black\"], \"black\");\n      this.queen = new Queen(design[\"black\"], \"black\");\n      this.pawns[0] = new Pawn(design[\"black\"], \"black\");\n      this.pawns[1] = new Pawn(design[\"black\"], \"black\");\n      this.pawns[2] = new Pawn(design[\"black\"], \"black\");\n      this.pawns[3] = new Pawn(design[\"black\"], \"black\");\n      this.pawns[4] = new Pawn(design[\"black\"], \"black\");\n      this.pawns[5] = new Pawn(design[\"black\"], \"black\");\n      this.pawns[6] = new Pawn(design[\"black\"], \"black\");\n      this.pawns[7] = new Pawn(design[\"black\"], \"black\");\n      this.knights = fillArray<Pawn>(new Knight(design[\"black\"], \"black\"), 2);\n      this.rooks = fillArray<Pawn>(new Rook(design[\"black\"], \"black\"), 2);\n      this.bishops = fillArray<Pawn>(new Bishop(design[\"black\"], \"black\"), 2);\n    }\n  }\n\n  capture = (piece: Piece) => {\n    this.capturedPieces.push(piece);\n  };\n\n  getPieces = (): Piece[] => {\n    return [\n      this.king,\n      this.queen,\n      ...this.bishops,\n      ...this.knights,\n      ...this.pawns,\n      ...this.rooks,\n    ];\n  };\n}\n\nexport enum SideEnum {\n  white,\n  black,\n}\n\nexport const maskSideInEnum = (side: string) =>\n  side === \"white\"\n    ? 0\n    : side === \"black\"\n    ? 1\n    : () => {\n        throw new Error('Expecting \"white\" or \"black\" ');\n      };\n","import { createContext } from \"react\";\nimport { BoardClass, ITilePosition, SelectedTile } from \"types/Board\";\n\nexport const BoardContext = createContext({} as BoardClass);\n\nexport const SelectedTileContext = createContext({} as SelectedTile);\n","import React, { CSSProperties, FC, MouseEvent, useContext } from \"react\";\nimport CSS from \"csstype\";\nimport clsx from 'clsx';\n\nimport \"./Tile.css\";\nimport { ITilePosition, TileClass } from \"../types/Board\";\nimport { BoardContext } from \"context/Board\";\n\nconst Tile: FC<{\n  tile: TileClass;\n  onClick: (event: MouseEvent) => void;\n  on_check: boolean;\n  show_move: boolean;\n  tile_position: ITilePosition;\n  style: CSSProperties;\n}> = ({\n  show_move,\n  tile: { variant, size, piece },\n  tile_position: { row, column },\n  onClick,\n  on_check,\n  style,\n  children,\n}) => {\n  const board = useContext(BoardContext);\n  \nconsole.log(clsx(\"tile\", on_check && \"--on-check\", !on_check && variant===1 && \"--variant1\" ||\"--variant2\"));\n\n  return (\n    <>\n      <div\n        onClick={onClick}\n        className={clsx(\"tile\", on_check && \"--on-check\", !on_check && variant===1 && \"--variant1\" ||\"--variant2\")}\n        style={{\n          height: \"100%\",\n          width: \"100%\",\n          fontSize: \"small\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          ...style,\n        }}\n      >\n        {piece?.icon ? piece.icon : <></>}\n        {show_move === true ? (\n          <div\n            style={{\n              width: \"30px\",\n              height: \"30px\",\n              position: \"absolute\",\n              top: \"40%\",\n              background: \"rgba(14, 143, 212, 0.5)\",\n              borderRadius: \"50%\",\n            }}\n          ></div>\n        ) : (\n          <></>\n        )}\n\n        {/* <div style={{ position: \"absolute\", bottom: \"0%\", display: \"flex\" }}>\n          {\" \"}\n          <div>[{row}]</div>\n          <div>[{column}]</div>\n        </div> */}\n      </div>\n    </>\n  );\n};\n\nexport default Tile;\n","import { Pawn } from \"types/Pieces\";\nimport { clone } from \"usefull-fns/Object\";\n\nexport const fillArray = <T extends unknown>(item: any, size: number): T[] => {\n  const arr: T[] = [];\n\n  for (let i = 0; i < size; i++) {\n    if (typeof item === \"object\") {\n      arr.push(clone(item));\n    }\n    arr.push(item);\n  }\n  return arr;\n};\n","export const clone = (obj: object) =>\n  Object.assign(Object.create(Object.getPrototypeOf(obj)), obj);\n","import { ITilePosition } from \"./Board\";\nimport { ISidePieces } from \"./Design\";\n\nexport class Piece {\n  icon: JSX.Element;\n  type: string;\n  side: string;\n  hasMoved: boolean = false;\n  location: ITilePosition | null = null;\n\n  constructor(_icon: JSX.Element, type: string, side: string) {\n    this.icon = _icon;\n    this.type = type;\n    this.side = side;\n  }\n}\n\nexport class Rook extends Piece {\n  constructor(design: ISidePieces, side: string) {\n    super(design.rook, \"rook\", side);\n  }\n}\n\nexport class Bishop extends Piece {\n  constructor(design: ISidePieces, side: string) {\n    super(design.bishop, \"bishop\", side);\n  }\n}\n\nexport class King extends Piece {\n  constructor(design: ISidePieces, side: string) {\n    super(design.king, \"king\", side);\n  }\n}\n\nexport class Queen extends Piece {\n  constructor(design: ISidePieces, side: string) {\n    super(design.queen, \"queen\", side);\n  }\n}\n\nexport class Knight extends Piece {\n  constructor(design: ISidePieces, side: string) {\n    super(design.knight, \"knight\", side);\n  }\n}\n\nexport class Pawn extends Piece {\n  constructor(design: ISidePieces, side: string) {\n    super(design.pawn, \"pawn\", side);\n  }\n}\n","import {\n  collapseTextChangeRangesAcrossMultipleVersions,\n  VoidExpression,\n} from \"typescript\";\nimport { IDesignPieces } from \"./Design\";\nimport { Piece } from \"./Pieces\";\nimport { SideEnum, SideClass } from \"./Side\";\nimport { clone } from \"usefull-fns/Object\";\n\nexport interface ITilePosition {\n  row: number;\n  column: number;\n}\n\nexport interface SelectedTile {\n  position: ITilePosition;\n  possible_moves: ITilePosition[];\n}\n\nexport interface IMovePiece {\n  prev: ITilePosition;\n  next: ITilePosition;\n}\n\nexport class TileClass {\n  piece?: Piece;\n  size: string = \"90px\";\n  variant:number;\n\n\n  constructor(variant:number) {\n    this.variant = variant;\n  }\n}\n\nexport interface BoardSides {\n  white: SideClass;\n  black: SideClass;\n}\n\nexport class BoardClass {\n  sides: BoardSides;\n  moves: IMovePiece[] = [];\n  tiles: TileClass[][] = [];\n\n  constructor(design: IDesignPieces) {\n\n    this.sides = {\n      white: new SideClass(design, SideEnum.white),\n      black: new SideClass(design, SideEnum.black),\n    };\n\n    for (let row_index = 0; row_index < 8; row_index++) {\n      let index_on_row: number = 0;\n      const row: TileClass[] = [];\n\n      const row_is_odd: boolean = row_index % 2 === 1;\n\n      while (index_on_row < 8) {\n        const index_is_even = index_on_row % 2 === 0;\n        let variant: number = 1;\n\n        if (row_is_odd) {\n          if (index_is_even) {\n            variant = 2;\n          }\n        } else {\n          if (!index_is_even) {\n            variant = 2;\n          }\n        }\n\n        row.push(new TileClass(variant));\n        index_on_row++;\n      }\n\n      this.tiles.push(row);\n    }\n    console.log(\"Called Constructor\");\n    this.newGame();\n  }\n\n  movePiece = (prev: ITilePosition, next: ITilePosition) => {\n    if (!this.position_is_out_of_bounds(next)) {\n      let prev_tile = this.tiles[prev.column][prev.row];\n      let next_tile = this.tiles[next.column][next.row];\n      console.log({ next_tile, prev_tile });\n\n      if (prev_tile.piece) {\n        //Castling\n        // if(prev_tile.piece.type===\"king\" && !prev_tile.piece.hasMoved){\n        //   const next_column_change = prev_tile.piece.side ===\"white\"?2:-2;\n        //   if(next.column === prev.column + next_column_change){\n        //     const column_change_till_edge = prev_tile.piece.side ===\"white\"?3:-3;\n\n        //     const edge_tile = this.tiles[prev.column+column_change_till_edge][prev.row];\n        //     if(edge_tile.piece && edge_tile.piece.type===\"rook\" && !edge_tile.piece.hasMoved){\n\n        //       return;\n        //     }\n        //   }\n\n        // }\n\n        //set Piece hasMove to true\n        if (!prev_tile.piece.hasMoved) prev_tile.piece.hasMoved = true;\n\n        //capture Piece\n        if (next_tile.piece && prev_tile.piece.side !== next_tile.piece.side) {\n          switch (prev_tile.piece.side) {\n            case \"white\":\n              this.sides[\"white\"].capture(next_tile.piece);\n\n              break;\n            case \"black\":\n              this.sides[\"black\"].capture(next_tile.piece);\n              break;\n\n            default:\n              throw new Error(\"@movePiece. prev_tile's side does not exist \");\n          }\n        }\n  \n        //move piece\n        next_tile.piece = prev_tile.piece;\n        next_tile.piece.location = next;\n        prev_tile.piece = undefined;\n        const move:IMovePiece ={ prev, next };\n        this.moves.push(move);\n\n        //are the kings on check?\n        this.sides.black.onCheck = this.is_on_check(\"black\");\n        this.sides.white.onCheck = this.is_on_check(\"white\");\n        \n\n        return move;\n      } else {\n        throw new Error(\"There was no Piece on Previous Tile\");\n      }\n    } else {\n      throw new Error(\"Next Position Out of Bounds\");\n    }\n  };\n\n  newGame = () => {\n    this.tiles[0][0].piece = this.sides.white.rooks[0];\n    this.sides.white.rooks[0].location = { column: 0, row: 0 };\n    this.tiles[1][0].piece = this.sides.white.knights[0];\n    this.sides.white.knights[0].location = { column: 1, row: 0 };\n    this.tiles[2][0].piece = this.sides.white.bishops[0];\n    this.sides.white.bishops[0].location = { column: 2, row: 0 };\n    this.tiles[3][0].piece = this.sides.white.queen;\n    this.sides.white.queen.location = { column: 3, row: 0 };\n    this.tiles[4][0].piece = this.sides.white.king;\n    this.sides.white.king.location = { column: 4, row: 0 };\n    this.tiles[5][0].piece = this.sides.white.bishops[1];\n    this.sides.white.bishops[1].location = { column: 5, row: 0 };\n    this.tiles[6][0].piece = this.sides.white.knights[1];\n    this.sides.white.knights[1].location = { column: 6, row: 0 };\n    this.tiles[7][0].piece = this.sides.white.rooks[1];\n    this.sides.white.rooks[1].location = { column: 7, row: 0 };\n\n    this.tiles[0][7].piece = this.sides.black.rooks[0];\n    this.sides.black.rooks[0].location = { column: 0, row: 7 };\n    this.tiles[1][7].piece = this.sides.black.knights[0];\n    this.sides.black.knights[0].location = { column: 1, row: 7 };\n    this.tiles[2][7].piece = this.sides.black.bishops[0];\n    this.sides.black.bishops[0].location = { column: 2, row: 7 };\n    this.tiles[3][7].piece = this.sides.black.queen;\n    this.sides.black.queen.location = { column: 3, row: 7 };\n    this.tiles[4][7].piece = this.sides.black.king;\n    this.sides.black.king.location = { column: 4, row: 7 };\n    this.tiles[5][7].piece = this.sides.black.bishops[1];\n    this.sides.black.bishops[1].location = { column: 5, row: 7 };\n    this.tiles[6][7].piece = this.sides.black.knights[1];\n    this.sides.black.knights[1].location = { column: 6, row: 7 };\n    this.tiles[7][7].piece = this.sides.black.rooks[1];\n    this.sides.black.rooks[1].location = { column: 7, row: 7 };\n\n    this.set_pawns();\n  };\n\n  private is_on_check = (side: string): boolean  => {\n    switch (side) {\n      case \"white\":\n        if (this.sides.white.king.location) {\n          const {\n            column: kings_column,\n            row: kings_row,\n          } = this.sides.white.king.location;\n\n          const pieces = this.sides.black.getPieces();\n\n          for (let i = 0; i < pieces.length; ++i) {\n            const piece = pieces[i];\n            if (piece.location) {\n              const possible_moves = this.possible_moves_from_tile(\n                piece.location\n              );\n\n              for (let j = 0; j < possible_moves.length; ++j) {\n                const move = possible_moves[j];\n                if (move.column === kings_column && move.row === kings_row)\n                  return true;\n              }\n            }\n          }\n        }\n        \n\n        break;\n      case \"black\":\n        if (this.sides.black.king.location) {\n          const {\n            column: kings_column,\n            row: kings_row,\n          } = this.sides.black.king.location;\n\n          const pieces = this.sides.white.getPieces();\n          for (let i = 0; i < pieces.length; ++i) {\n            const piece = pieces[i];\n\n            if (piece.location) {\n              const possible_moves = this.possible_moves_from_tile(\n                piece.location\n              );\n\n              for (let j = 0; j < possible_moves.length; ++j) {\n           \n\n                const move = possible_moves[j];\n                 if (move.column === kings_column && move.row === kings_row)\n                  return true;\n              }\n            }\n          }\n        }\n        break;\n      default:\n        throw Error('parameter side should be either \"white\" or \"black\"');\n    }\n    return false;\n  };\n\n  private set_pawns = () => {\n    for (let index = 0; index < 8; ++index) {\n      this.tiles[index][1].piece = this.sides.white.pawns[index];\n      this.sides.white.pawns[index].location = { column: index, row: 1 };\n\n      this.tiles[index][6].piece = this.sides.black.pawns[index];\n      this.sides.black.pawns[index].location = { column: index, row: 6 };\n    }\n  };\n\n  possible_moves_from_tile = (tile_position: ITilePosition) => {\n    const { column, row } = tile_position;\n\n    const tile = this.tiles[column][row];\n\n    let possible_moves: ITilePosition[] = [];\n\n    if (tile.piece) {\n      possible_moves = this.map_piece_to_move(tile_position, tile.piece);\n    }\n\n    return possible_moves;\n  };\n\n  private traverse_tiles = (action: (tile: TileClass) => void) => {\n    for (let row = 0; row < 8; ++row) {\n      let column: number = 0;\n\n      while (column < 8) {\n        action(this.tiles[column++][row]);\n      }\n    }\n  };\n\n  private map_piece_to_move = (\n    tile_position: ITilePosition,\n    piece: Piece\n  ): ITilePosition[] => {\n    const { row, column } = tile_position;\n    const { side, type } = piece;\n\n    let movablePositions: ITilePosition[] = [];\n\n    switch (type) {\n      case \"bishop\":\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 1, 1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, -1, 1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 1, -1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, -1, -1),\n        ];\n        break;\n\n      case \"pawn\":\n        if (true) {\n          //diagonals\n          let ld = {} as ITilePosition;\n          ld.column = side === \"white\" ? 1 : -1;\n          ld.row = side === \"white\" ? 1 : -1;\n          if (\n            !this.position_is_out_of_bounds({\n              column: column + ld.column,\n              row: row + ld.row,\n            }) &&\n            this.tiles[column + ld.column][row + ld.row].piece !== undefined\n          ) {\n            if (\n              this.tiles[column + ld.column][row + ld.row].piece?.side !== side\n            ) {\n              movablePositions = [\n                ...movablePositions,\n                ...this.linear_scan(tile_position, side, 1, 1),\n              ];\n            }\n          }\n          if (\n            !this.position_is_out_of_bounds({\n              column: column - ld.column,\n              row: row + ld.row,\n            }) &&\n            this.tiles[column - ld.column][row + ld.row].piece !== undefined\n          ) {\n            if (\n              this.tiles[column - ld.column][row + ld.row].piece?.side !== side\n            ) {\n              movablePositions = [\n                ...movablePositions,\n                ...this.linear_scan(tile_position, side, -1, 1),\n              ];\n            }\n          }\n        }\n\n        if (!piece.hasMoved) {\n          // console.log(piece.hasMoved);\n\n          movablePositions = [\n            ...movablePositions,\n            ...this.linear_recursive_scan(tile_position, side, 0, 1, 2),\n          ];\n        } else {\n          movablePositions = [\n            ...movablePositions,\n            ...this.linear_recursive_scan(tile_position, side, 0, 1, 1),\n          ];\n        }\n        break;\n\n      case \"queen\":\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 1, 0),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, -1, 0),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 0, 1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 0, -1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 1, 1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, -1, 1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 1, -1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, -1, -1),\n        ];\n        break;\n\n      case \"rook\":\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 1, 0),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, -1, 0),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 0, 1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 0, -1),\n        ];\n        break;\n\n      case \"knight\":\n        movablePositions = [\n          ...movablePositions,\n          ...this.radial_scan(tile_position, side, 2, 1),\n        ];\n        break;\n\n      case \"king\":\n        movablePositions = [\n          ...movablePositions,\n          ...this.radial_scan(tile_position, side, 1, 1),\n          ...this.radial_scan(tile_position, side, 1, 0),\n        ];\n\n        if (!piece.hasMoved) {\n          const column_change = side === \"white\" ? 2 : -2;\n\n          if (\n            !this.position_is_out_of_bounds({\n              row,\n              column: column + column_change,\n            }) &&\n            this.tiles[column + column_change][row].piece === undefined\n          ) {\n            movablePositions = [\n              ...movablePositions,\n              ...this.linear_scan(tile_position, side, 2, 0),\n            ];\n          }\n        }\n        break;\n\n      default:\n        break;\n    }\n    return movablePositions;\n  };\n\n  private linear_recursive_scan = (\n    tile_position: ITilePosition,\n    side: string,\n    column_change: number,\n    row_change: number,\n    limit: number = Infinity,\n    count: number = 0\n  ): ITilePosition[] => {\n    count++;\n    const { column, row } = tile_position;\n\n    const new_column =\n      side === \"white\"\n        ? column + column_change * count\n        : column - column_change * count;\n    const new_row =\n      side === \"white\" ? row + row_change * count : row - row_change * count;\n\n    const newPosition: ITilePosition = { column: new_column, row: new_row };\n    const is_out_of_bounds = this.position_is_out_of_bounds(newPosition);\n\n    let positions: ITilePosition[] = [];\n\n    if (!is_out_of_bounds) {\n      let tile = this.tiles[column][row];\n      let next_tile = this.tiles[newPosition.column][newPosition.row];\n\n      if (count <= limit) {\n        if (next_tile.piece === undefined) {\n          positions = [\n            newPosition,\n            ...this.linear_recursive_scan(\n              tile_position,\n              side,\n              column_change,\n              row_change,\n              limit,\n              count\n            ),\n          ];\n        } else if (tile.piece?.side !== next_tile.piece.side) {\n          if (tile.piece?.type === \"pawn\") {\n            return positions;\n          } else {\n            positions = [\n              newPosition,\n              ...this.linear_recursive_scan(\n                tile_position,\n                side,\n                column_change,\n                row_change,\n                count,\n                count\n              ),\n            ];\n          }\n        }\n      }\n    }\n\n    return positions;\n  };\n\n  private linear_scan = (\n    { column, row }: ITilePosition,\n    side: string,\n    column_change: number,\n    row_change: number\n  ) => {\n    let positions: ITilePosition[] = [];\n\n    const new_column =\n      side === \"white\" ? column + column_change : column - column_change;\n    const new_row = side === \"white\" ? row + row_change : row - row_change;\n\n    const newPosition: ITilePosition = { column: new_column, row: new_row };\n\n    const is_out_of_bounds = this.position_is_out_of_bounds(newPosition);\n\n    if (!is_out_of_bounds) {\n      let tile = this.tiles[column][row];\n      let next_tile = this.tiles[newPosition.column][newPosition.row];\n\n      if (next_tile.piece === undefined) {\n        positions = [...positions, newPosition];\n      } else if (tile.piece?.side !== next_tile.piece.side) {\n        positions = [...positions, newPosition];\n      }\n    }\n\n    return positions;\n  };\n\n  private radial_scan = (\n    tile_position: ITilePosition,\n    side: string,\n    column_change: number,\n    row_change: number\n  ): ITilePosition[] => {\n    return [\n      ...this.linear_scan(tile_position, side, column_change, row_change),\n      ...this.linear_scan(tile_position, side, -column_change, -row_change),\n      ...this.linear_scan(tile_position, side, column_change, -row_change),\n      ...this.linear_scan(tile_position, side, -column_change, row_change),\n      ...this.linear_scan(tile_position, side, row_change, column_change),\n      ...this.linear_scan(tile_position, side, -row_change, -column_change),\n      ...this.linear_scan(tile_position, side, row_change, -column_change),\n      ...this.linear_scan(tile_position, side, -row_change, column_change),\n    ];\n  };\n\n  private position_is_out_of_bounds = ({\n    column,\n    row,\n  }: ITilePosition): boolean => {\n    if (column >= 8 || column < 0) {\n      return true;\n    } else if (row >= 8 || row < 0) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n}\n","import * as React from \"react\";\n\nexport const BishopIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 40 75\"\n    height={70}\n    width={70}\n    {...props}\n  >\n    <path\n      d=\"M10 10.47a8.675 8.675 0 011.498-3.683 7.575 7.575 0 002.948 4.046 1 1 0 101.108-1.665 6.506 6.506 0 01-2.517-4.704 64.574 64.574 0 013.208-4.11.997.997 0 011.51.001C21.665 4.989 24 8.771 24 10.47A6.436 6.436 0 0120.688 16h-7.376A6.436 6.436 0 0110 10.47zM8 20v-1c0-.552.448-1 1-1h16c.552 0 1 .448 1 1v1c0 .552-.448 1-1 1H9c-.552 0-1-.448-1-1zm4 3h10v11H12V23zM8 37c0-.552.448-1 1-1h16c.552 0 1 .448 1 1v2c0 .552-.448 1-1 1H9c-.552 0-1-.448-1-1v-2zm-4.933 9.475a2 2 0 011.156-2.615L9.183 42h15.635l4.96 1.86a2 2 0 011.155 2.615L30.323 48H3.677l-.61-1.525zM34 55c0 .552-.448 1-1 1h-1v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2H8v-2a1 1 0 00-2 0v2H4v-2a1 1 0 00-2 0v2H1c-.552 0-1-.448-1-1v-4c0-.552.448-1 1-1h32c.552 0 1 .448 1 1v4z\"\n      fillRule=\"nonzero\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import * as React from \"react\";\n\nexport const KingIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 40 75\"\n    height={70}\n    width={70}\n    {...props}\n  >\n    <g fillRule=\"nonzero\" fill=\"currentColor\">\n      <path d=\"M10.072 10.914a.837.837 0 01.018-.717c.155-.293.43-.505.753-.579L17 8.033l6.157 1.585c.324.074.598.286.753.58.113.223.12.487.018.716L22.163 15H11.837l-1.765-4.086zM8 18c0-.552.448-1 1-1h16a1 1 0 010 2H9c-.552 0-1-.448-1-1zm4 3h10v17H12V21zM9 40h16a1 1 0 010 2H9a1 1 0 010-2zm-5.933 8.475a2 2 0 011.156-2.615L9.183 44h15.635l4.96 1.86a2 2 0 011.155 2.615L30.323 50H3.677l-.61-1.525zM34 57c0 .552-.448 1-1 1h-1v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2H8v-2a1 1 0 00-2 0v2H4v-2a1 1 0 00-2 0v2H1c-.552 0-1-.448-1-1v-4c0-.552.448-1 1-1h32c.552 0 1 .448 1 1v4zM16 7.2V1a1 1 0 012 0v6.2L17 7l-1 .2z\" />\n      <path d=\"M19 4h-4a1 1 0 010-2h4a1 1 0 010 2z\" />\n    </g>\n  </svg>\n);\n","import * as React from \"react\";\n\nexport const KnightIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 40 75\"\n    height={70}\n    width={70}\n    {...props}\n  >\n    <path\n      d=\"M9 41.001c-.552 0-1-.447-1-1v-2c0-.552.448-.999 1-1h16c.552.001 1 .448 1 1v2c0 .553-.448 1-1 1H9zm20.055-7.097A2.004 2.004 0 0127.215 35h-6.654c.038-.042.08-.08.116-.123a5.987 5.987 0 001.339-4.863l-1.41-8.455 8.245 10.526c.423.512.503 1.226.204 1.82zM5.123 9.573a9.9 9.9 0 015.305-3.959 22.518 22.518 0 00-6 12.228c-.822-3.35-.607-6.128.695-8.27zm.897 12.894c.17-9.708 4.758-14.706 7.114-16.629-.012.257-.02.52-.02.793a1 1 0 002 0 10.22 10.22 0 011.155-5.142c.192-.312.535-.498.9-.489l2.972-.053v2.257a1.954 1.954 0 001.128 1.752l2.643 1.247a14.917 14.917 0 014.598 3.351l3.092 3.336a1.758 1.758 0 01-.083 2.467l-1.49 1.37-2.333-1.468c-1.388-.873-3.787-1.482-7.129-1.81a3.025 3.025 0 00-2.949 1.523 2.785 2.785 0 00.258 3.1l.155.199 2.012 12.072a3.991 3.991 0 01-.893 3.242A4.047 4.047 0 0116 35H8.09a1.935 1.935 0 01-2.012-1.842V22.737a.99.99 0 00-.057-.27zm-2.953 25.01a2 2 0 011.156-2.616l4.96-1.86h15.635l4.96 1.86a2 2 0 011.155 2.616L30.323 49H3.677l-.61-1.525zM34 56c0 .553-.448 1-1 1h-1v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2H8v-2a1 1 0 00-2 0v2H4v-2a1 1 0 00-2 0v2H1c-.552 0-1-.447-1-1v-4c0-.552.448-.999 1-1h1.997l.003.001h30c.552 0 1 .447 1 1v4z\"\n      fillRule=\"nonzero\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import * as React from \"react\";\n\nexport const QueenIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 40 75\"\n    height={70}\n    width={70}\n    {...props}\n  >\n    <g fillRule=\"nonzero\" fill=\"currentColor\">\n      <path d=\"M17 0a2.006 2.006 0 00-2 2c-.002.413.128.816.37 1.15 1.077-.2 2.183-.2 3.26 0 .242-.334.372-.737.37-1.15a2.006 2.006 0 00-2-2zm-5.2 6.94c-.02.02-.05.04-.07.06h.09l-.02-.06zm10.4 0l-.02.06h.09c-.02-.02-.05-.04-.07-.06zm0 0l-.02.06h.09c-.02-.02-.05-.04-.07-.06zM25 15H9a1 1 0 000 2h16a1 1 0 000-2zm-13 4v17h10V19H12zm13 19H9a1 1 0 000 2h16a1 1 0 000-2zm5.91 6.93a1.981 1.981 0 00-1.13-1.07L24.82 42H9.18l-4.96 1.86a1.981 1.981 0 00-1.13 1.07 2.03 2.03 0 00-.02 1.55L3.68 48h26.64l.61-1.52a2.03 2.03 0 00-.02-1.55zM33 50H1a1.003 1.003 0 00-1 1v4c.002.552.448.998 1 1h1v-2a1 1 0 012 0v2h2v-2a1 1 0 012 0v2h2v-2a1 1 0 012 0v2h2v-2a1 1 0 012 0v2h2v-2a1 1 0 012 0v2h2v-2a1 1 0 012 0v2h2v-2a1 1 0 012 0v2h2v-2a1 1 0 012 0v2h1a1.003 1.003 0 001-1v-4a1.003 1.003 0 00-1-1z\" />\n      <path d=\"M24.85 5.32L23.62 9h-.01l-1.33 4H11.71L9.15 5.32a1.002 1.002 0 111.9-.64l.75 2.26c-.02.02-.05.04-.07.06h.09l-.02-.06a7.94 7.94 0 0110.4 0l-.02.06h.09c-.02-.02-.05-.04-.07-.06l.75-2.26a1.002 1.002 0 111.9.64z\" />\n      <path d=\"M11.82 7h-.09c.02-.02.05-.04.07-.06l.02.06zM22.27 7h-.09l.02-.06c.02.02.05.04.07.06z\" />\n    </g>\n  </svg>\n);\n","import * as React from \"react\";\n\nexport const PawnIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 40 75\"\n    height={70}\n    width={70}\n    {...props}\n  >\n    <path\n      d=\"M13.05 2.05a7 7 0 119.901 9.898 7 7 0 01-9.9-9.898zm1.498 15.797a33.035 33.035 0 00-.561-2.796 8.96 8.96 0 008.027 0c-.226.92-.417 1.86-.562 2.795L21.43 18h-6.86l-.022-.153zM9 23v-2c0-.552.448-1 1-1h16c.552 0 1 .448 1 1v2c0 .552-.448 1-1 1H10c-.552 0-1-.448-1-1zm5.76 3h6.482a25.675 25.675 0 002.154 8H12.605a25.454 25.454 0 002.155-8zM7 37c0-.552.448-1 1-1h20c.552 0 1 .448 1 1v2c0 .552-.448 1-1 1H8c-.552 0-1-.448-1-1v-2zm-5.906 7.925a1.985 1.985 0 011.128-1.065l5.13-1.923.011-.008c.21.046.423.07.637.071h20c.214 0 .428-.025.637-.071l.012.008 5.13 1.923a2 2 0 011.154 2.615L34.323 48H1.677l-.61-1.525a1.987 1.987 0 01.027-1.55zM36 55c0 .552-.448 1-1 1h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2H9v-2a1 1 0 00-2 0v2H5v-2a1 1 0 00-2 0v2H1c-.552 0-1-.448-1-1v-4c0-.551.447-.998.999-1H35c.552.002.998.449.999 1v4z\"\n      fillRule=\"nonzero\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import * as React from \"react\";\n\nexport const RookIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 40 75\"\n    height={70}\n    width={70}\n    {...props}\n  >\n    <path\n      d=\"M5 0h2v2a2.002 2.002 0 002 2h2a2.002 2.002 0 002-2V0h2v2a2.003 2.003 0 001.999 2H19A2.003 2.003 0 0021 2V0h2v2a2.002 2.002 0 002 2h2a2.002 2.002 0 002-2V0h2v5.871a4.023 4.023 0 01-1.228 2.884L28.477 10H7.523L6.228 8.755A4.022 4.022 0 015 5.87V0zm2 15v-2c0-.552.448-1 1-1h20c.552 0 1 .448 1 1v2c0 .552-.448 1-1 1H8c-.552 0-1-.448-1-1zm3 3h16v16H10V18zM7 37c0-.552.448-1 1-1h20c.552 0 1 .448 1 1v2c0 .552-.448 1-1 1H8c-.552 0-1-.448-1-1v-2zm-5.906 7.925a1.985 1.985 0 011.128-1.065l5.13-1.923.011-.008c.21.046.423.07.637.071h20c.214 0 .428-.025.637-.071l.012.008 5.13 1.922a2 2 0 011.154 2.616L34.323 48H1.677l-.61-1.525a1.987 1.987 0 01.027-1.55zM36 55c0 .552-.448 1-1 1h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2H9v-2a1 1 0 00-2 0v2H5v-2a1 1 0 00-2 0v2H1c-.552 0-1-.448-1-1v-4c0-.551.447-.998.999-1H35A1 1 0 0136 51v4z\"\n      fillRule=\"nonzero\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import { BishopIcon } from \"./icons/bishop\";\nimport { KingIcon } from \"./icons/king\";\nimport { KnightIcon } from \"./icons/knight\";\nimport { QueenIcon } from \"./icons/queen\";\nimport { PawnIcon } from \"./icons/pawn\";\nimport { RookIcon } from \"./icons/rook\";\n\nimport { IDesignPieces } from \"types/Design\";\n\nexport const classic: IDesignPieces = {\n  [\"black\"]: {\n    bishop: <BishopIcon className=\"pieces black_pieces\" height={70}/>,\n    king: <KingIcon className=\"pieces black_pieces\"  height={70} />,\n    queen: <QueenIcon className=\"pieces black_pieces\" height={70} />,\n    knight: <KnightIcon className=\"pieces black_pieces\" height={70} />,\n    pawn: <PawnIcon className=\"pieces black_pieces\" height={70} />,\n    rook: <RookIcon className=\"pieces black_pieces\" height={70} />,\n  },\n  [\"white\"]: {\n    bishop: <BishopIcon className=\"pieces white_pieces\" height={70} />,\n    king: <KingIcon className=\"pieces white_pieces\" height={70} />,\n    queen: <QueenIcon className=\"pieces white_pieces\" height={70} />,\n    knight: <KnightIcon className=\"pieces white_pieces\" height={70} />,\n    pawn: <PawnIcon className=\"pieces white_pieces\" height={70} />,\n    rook: <RookIcon className=\"pieces white_pieces\" height={70} />,\n  },\n};\n","import * as React from \"react\";\n\nexport const BishopIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 40 75\"\n    height={70}\n    width={70}\n    {...props}\n  >\n    <path\n      d=\"M3 60h32a3.003 3.003 0 003-3v-4a3.003 3.003 0 00-3-3h-.523l.313-.782a4.001 4.001 0 00-2.31-5.231l-3.112-1.167A2.97 2.97 0 0030 41v-2a3.003 3.003 0 00-3-3h-1V25h1a3.003 3.003 0 003-3v-1a3.003 3.003 0 00-3-3h-1.176A8.258 8.258 0 0028 12.47c0-2.847-3.652-7.774-6.716-11.404a2.976 2.976 0 00-4.568-.001C13.652 4.696 10 9.623 10 12.47c.014 2.05.79 4.02 2.176 5.53H11a3.003 3.003 0 00-3 3v1a3.003 3.003 0 003 3h1v11h-1a3.003 3.003 0 00-3 3v2c.003.66.225 1.3.632 1.82L5.52 43.987a4.001 4.001 0 00-2.31 5.231l.313.782H3a3.003 3.003 0 00-3 3v4a3.003 3.003 0 003 3zm9-47.53a8.675 8.675 0 011.498-3.683 7.575 7.575 0 002.948 4.046 1 1 0 101.108-1.665 6.506 6.506 0 01-2.517-4.704 64.574 64.574 0 013.208-4.11.997.997 0 011.51.001C23.665 6.989 26 10.771 26 12.47A6.436 6.436 0 0122.688 18h-7.376A6.436 6.436 0 0112 12.47zM10 22v-1c0-.552.448-1 1-1h16c.552 0 1 .448 1 1v1c0 .552-.448 1-1 1H11c-.552 0-1-.448-1-1zm4 3h10v11H14V25zm-4 14c0-.552.448-1 1-1h16c.552 0 1 .448 1 1v2c0 .552-.448 1-1 1H11c-.552 0-1-.448-1-1v-2zm-4.933 9.475a2 2 0 011.156-2.615l4.96-1.86h15.635l4.96 1.86a2 2 0 011.155 2.615L32.323 50H5.677l-.61-1.525zM2 53c0-.552.448-1 1-1h32c.552 0 1 .448 1 1v4c0 .552-.448 1-1 1h-1v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2H6v-2a1 1 0 00-2 0v2H3c-.552 0-1-.448-1-1v-4z\"\n      fillRule=\"nonzero\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import * as React from \"react\";\n\nexport const KingIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 40 75\"\n    height={70}\n    width={70}\n    {...props}\n  >\n    <path\n      d=\"M3 60h32a3.003 3.003 0 003-3v-4a3.003 3.003 0 00-3-3h-.523l.313-.782a4.001 4.001 0 00-2.31-5.231l-3.112-1.167A2.97 2.97 0 0030 41a3.003 3.003 0 00-3-3h-1V21h1a3 3 0 000-6h-.659l1.423-3.292c.331-.767.31-1.64-.058-2.39a3.13 3.13 0 00-2.05-1.636L20 6.225V4h1a1 1 0 000-2h-1V1a1 1 0 00-2 0v1h-1a1 1 0 000 2h1v2.225l-5.655 1.457a3.13 3.13 0 00-2.051 1.635 2.852 2.852 0 00-.058 2.39L11.66 15H11a3 3 0 000 6h1v17h-1a3.003 3.003 0 00-3 3c.003.66.225 1.3.632 1.82L5.52 43.987a4.001 4.001 0 00-2.31 5.231l.313.782H3a3.003 3.003 0 00-3 3v4a3.003 3.003 0 003 3zm9.072-49.086a.837.837 0 01.018-.717c.155-.293.43-.505.753-.579L19 8.033l6.157 1.585c.324.074.598.286.753.58.113.223.12.487.018.716L24.163 15H13.837l-1.765-4.086zM10 18c0-.552.448-1 1-1h16a1 1 0 010 2H11c-.552 0-1-.448-1-1zm4 3h10v17H14V21zm-3 19h16a1 1 0 010 2H11a1 1 0 010-2zm-5.933 8.475a2 2 0 011.156-2.615l4.96-1.86h15.635l4.96 1.86a2 2 0 011.155 2.615L32.323 50H5.677l-.61-1.525zM2 53c0-.552.448-1 1-1h32c.552 0 1 .448 1 1v4c0 .552-.448 1-1 1h-1v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2H6v-2a1 1 0 00-2 0v2H3c-.552 0-1-.448-1-1v-4z\"\n      fillRule=\"nonzero\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import * as React from \"react\";\n\nexport const KnightIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 40 75\"\n    height={70}\n    width={70}\n    {...props}\n  >\n    <path\n      d=\"M35 50.001h-.523l.313-.782a4.001 4.001 0 00-2.31-5.23l-3.112-1.168a2.97 2.97 0 00.632-1.82v-2a2.969 2.969 0 00-.197-1.041 3.957 3.957 0 003.05-2.18 3.653 3.653 0 00-.428-3.928L21.45 17.84a.795.795 0 01-.079-.904 1.004 1.004 0 011.001-.497c2.987.294 5.152.817 6.26 1.514l2.334 1.469a2.033 2.033 0 002.477-.243l1.449-1.366a3.765 3.765 0 00.176-5.282l-3.091-3.335a16.896 16.896 0 00-5.211-3.8l-2.625-1.19V1.946A1.979 1.979 0 0022.137 0H19.17a3.031 3.031 0 00-2.635 1.493 9.92 9.92 0 00-.95 2.34c-1.689.186-7.389 1.142-10.163 5.688-2.17 3.557-1.967 8.353.587 14.253 0 .078-.009.148-.009.226 0 .133.027.265.078.387v9.77A3.828 3.828 0 008.36 37.61 2.961 2.961 0 008 39v2c.003.66.225 1.3.632 1.82L5.52 43.988a4 4 0 00-2.31 5.23l.313.783H3a3.003 3.003 0 00-3 3v4a3.004 3.004 0 003 3.001h32a3.004 3.004 0 003-3v-4a3.003 3.003 0 00-3-3zm-24-8c-.552 0-1-.447-1-1v-2c0-.552.448-.999 1-1h16c.552.001 1 .448 1 1v2c0 .553-.448 1-1 1H11zm20.055-7.097A2.004 2.004 0 0129.215 36h-6.654c.038-.042.08-.08.116-.123a5.987 5.987 0 001.339-4.863l-1.41-8.455 8.245 10.526c.423.512.503 1.226.204 1.82zM7.123 10.573a9.9 9.9 0 015.305-3.959 22.518 22.518 0 00-6 12.228c-.822-3.35-.607-6.128.695-8.27zm.897 12.894c.17-9.708 4.758-14.706 7.114-16.629-.012.257-.02.52-.02.793a1 1 0 002 0 10.22 10.22 0 011.155-5.142c.192-.312.535-.498.9-.489l2.972-.053v2.257a1.954 1.954 0 001.128 1.752l2.643 1.247a14.917 14.917 0 014.598 3.351l3.092 3.336a1.758 1.758 0 01-.083 2.467l-1.49 1.37-2.333-1.468c-1.388-.873-3.787-1.482-7.129-1.81a3.025 3.025 0 00-2.949 1.523 2.785 2.785 0 00.258 3.1l.155.199 2.012 12.072a3.991 3.991 0 01-.893 3.242A4.047 4.047 0 0118 36h-7.91a1.935 1.935 0 01-2.012-1.842V23.737a.99.99 0 00-.057-.27zm-2.953 25.01a2 2 0 011.156-2.616l4.96-1.86h15.635l4.96 1.86a2 2 0 011.155 2.616L32.323 50H5.677l-.61-1.525zM36 57c0 .553-.448 1-1 1h-1v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2H6v-2a1 1 0 00-2 0v2H3c-.552 0-1-.447-1-1v-4c0-.552.448-.999 1-1h1.997l.003.001h30c.552 0 1 .447 1 1v4z\"\n      fillRule=\"nonzero\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import * as React from \"react\";\n\nexport const QueenIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 40 75\"\n    height={70}\n    width={70}\n    {...props}\n  >\n    <path\n      d=\"M3 60h32a3.003 3.003 0 003-3v-4a3.003 3.003 0 00-3-3h-.523l.313-.782a4.001 4.001 0 00-2.31-5.231l-3.112-1.167A2.97 2.97 0 0030 41a3.003 3.003 0 00-3-3h-1V21h1a3 3 0 000-6h-.613l1.389-4.166.01-.028 1.162-3.49a1 1 0 10-1.896-.632l-.571 1.713a9.984 9.984 0 00-3.86-2.703 4 4 0 10-7.241 0 9.984 9.984 0 00-3.86 2.703l-.572-1.713a1 1 0 10-1.896.632l1.163 3.49.01.028L11.612 15H11a3 3 0 000 6h1v17h-1a3.003 3.003 0 00-3 3c.003.66.225 1.3.632 1.82L5.52 43.987a4.001 4.001 0 00-2.31 5.231l.313.782H3a3.003 3.003 0 00-3 3v4a3.003 3.003 0 003 3zM19 7a7.993 7.993 0 015.266 2H13.734A7.993 7.993 0 0119 7zm-2-3a2 2 0 113.635 1.15c-1.08-.2-2.19-.2-3.27 0A1.977 1.977 0 0117 4zm-4.613 7h13.226l-1.333 4H13.72l-1.333-4zM10 18c0-.552.448-1 1-1h16a1 1 0 010 2H11c-.552 0-1-.448-1-1zm4 3h10v17H14V21zm-3 19h16a1 1 0 010 2H11a1 1 0 010-2zm-5.933 8.475a2 2 0 011.156-2.615l4.96-1.86h15.635l4.96 1.86a2 2 0 011.155 2.615L32.323 50H5.677l-.61-1.525zM2 53c0-.552.448-1 1-1h32c.552 0 1 .448 1 1v4c0 .552-.448 1-1 1h-1v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2H6v-2a1 1 0 00-2 0v2H3c-.552 0-1-.448-1-1v-4z\"\n      fillRule=\"nonzero\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import * as React from \"react\";\n\nexport const PawnIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 40 75\"\n    height={70}\n    width={70}\n    {...props}\n  >\n    <path\n      d=\"M3 60h34a3.003 3.003 0 003-3v-4a2.993 2.993 0 00-1.656-2.667l.446-1.115a4 4 0 00-2.31-5.231l-3.909-1.466c.278-.459.426-.985.429-1.521v-2a3.003 3.003 0 00-3-3h-2.528a.98.98 0 00-.091-.434A23.55 23.55 0 0125.254 28H28a3.003 3.003 0 003-3v-2a3.003 3.003 0 00-3-3h-2.544a30.257 30.257 0 011.246-5.009 9 9 0 10-13.404 0A30.244 30.244 0 0114.544 20H12a3.003 3.003 0 00-3 3v2a3.003 3.003 0 003 3h2.749a23.384 23.384 0 01-2.13 7.566.98.98 0 00-.09.434H10a3.003 3.003 0 00-3 3v2c.003.536.15 1.062.429 1.521l-3.91 1.466a4 4 0 00-2.309 5.231l.446 1.115A2.993 2.993 0 000 53v4a3.003 3.003 0 003 3zm35-3c0 .552-.448 1-1 1h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2H7v-2a1 1 0 00-2 0v2H3c-.552 0-1-.448-1-1v-4c0-.551.447-.998.999-1H37c.552.002.998.449.999 1v4zM15.05 4.05a7 7 0 119.901 9.898 7 7 0 01-9.9-9.898zm1.498 15.797a33.035 33.035 0 00-.561-2.796 8.96 8.96 0 008.027 0c-.226.92-.417 1.86-.562 2.795L23.43 20h-6.86l-.022-.153zM11 25v-2c0-.552.448-1 1-1h16c.552 0 1 .448 1 1v2c0 .552-.448 1-1 1H12c-.552 0-1-.448-1-1zm5.76 3h6.482a25.675 25.675 0 002.154 8H14.605a25.454 25.454 0 002.155-8zM9 39c0-.552.448-1 1-1h20c.552 0 1 .448 1 1v2c0 .552-.448 1-1 1H10c-.552 0-1-.448-1-1v-2zm-5.906 7.925a1.985 1.985 0 011.128-1.065l5.13-1.923.011-.008c.21.046.423.07.637.071h20c.214 0 .428-.025.637-.071l.012.008 5.13 1.923a2 2 0 011.154 2.615L36.323 50H3.677l-.61-1.525a1.987 1.987 0 01.027-1.55z\"\n      fillRule=\"nonzero\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import * as React from \"react\";\n\nexport const RookIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 40 75\"\n    height={70}\n    width={70}\n    {...props}\n  >\n    <path\n      d=\"M3 60h34a3.003 3.003 0 003-3v-4a2.993 2.993 0 00-1.656-2.667l.446-1.115a4.001 4.001 0 00-2.31-5.231l-3.909-1.466c.278-.459.426-.985.429-1.521v-2a3.003 3.003 0 00-3-3V20a3.003 3.003 0 003-3v-2a2.973 2.973 0 00-.735-1.945l.894-.859A6.031 6.031 0 0035 7.871V2a2.002 2.002 0 00-2-2h-2a2.002 2.002 0 00-2 2v2h-2V2a2.002 2.002 0 00-2-2h-2a2.002 2.002 0 00-2 2v2h-2V2a2.002 2.002 0 00-2-2h-2a2.002 2.002 0 00-2 2v2h-2V2a2.002 2.002 0 00-2-2H7a2.002 2.002 0 00-2 2v5.871a6.03 6.03 0 001.842 4.325l.893.859A2.973 2.973 0 007 15v2a3.003 3.003 0 003 3v16a3.003 3.003 0 00-3 3v2c.003.536.15 1.062.429 1.521l-3.91 1.466a4 4 0 00-2.309 5.231l.446 1.115A2.993 2.993 0 000 53v4a3.003 3.003 0 003 3zm35-3c0 .552-.448 1-1 1h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2H7v-2a1 1 0 00-2 0v2H3c-.552 0-1-.448-1-1v-4c0-.551.447-.998.999-1H37A1 1 0 0138 53v4zM7 2h2v2a2.002 2.002 0 002 2h2a2.002 2.002 0 002-2V2h2v2a2.003 2.003 0 001.999 2H21A2.003 2.003 0 0023 4V2h2v2a2.002 2.002 0 002 2h2a2.002 2.002 0 002-2V2h2v5.871a4.023 4.023 0 01-1.228 2.884L30.477 12H9.523l-1.295-1.245A4.022 4.022 0 017 7.87V2zm2 15v-2c0-.552.448-1 1-1h20c.552 0 1 .448 1 1v2c0 .552-.448 1-1 1H10c-.552 0-1-.448-1-1zm3 3h16v16H12V20zM9 39c0-.552.448-1 1-1h20c.552 0 1 .448 1 1v2c0 .552-.448 1-1 1H10c-.552 0-1-.448-1-1v-2zm-5.906 7.925a1.985 1.985 0 011.128-1.065l5.13-1.923.011-.008c.21.046.423.07.637.071h20c.214 0 .428-.025.637-.071l.012.008 5.13 1.922a2 2 0 011.154 2.616L36.323 50H3.677l-.61-1.525a1.987 1.987 0 01.027-1.55z\"\n      fillRule=\"nonzero\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import { BishopIcon } from \"./icons/bishop\";\nimport { KingIcon } from \"./icons/king\";\nimport { KnightIcon } from \"./icons/knight\";\nimport { QueenIcon } from \"./icons/queen\";\nimport { PawnIcon } from \"./icons/pawn\";\nimport { RookIcon } from \"./icons/rook\";\n\nimport { IDesignPieces } from \"types/Design\";\n\nexport const classic_outlined: IDesignPieces = {\n  [\"black\"]: {\n    bishop: <BishopIcon className=\"pieces black_pieces\" height={70}/>,\n    king: <KingIcon className=\"pieces black_pieces\"  height={70} />,\n    queen: <QueenIcon className=\"pieces black_pieces\" height={70} />,\n    knight: <KnightIcon className=\"pieces black_pieces\" height={70} />,\n    pawn: <PawnIcon className=\"pieces black_pieces\" height={70} />,\n    rook: <RookIcon className=\"pieces black_pieces\" height={70} />,\n  },\n  [\"white\"]: {\n    bishop: <BishopIcon className=\"pieces white_pieces\" height={70} />,\n    king: <KingIcon className=\"pieces white_pieces\" height={70} />,\n    queen: <QueenIcon className=\"pieces white_pieces\" height={70} />,\n    knight: <KnightIcon className=\"pieces white_pieces\" height={70} />,\n    pawn: <PawnIcon className=\"pieces white_pieces\" height={70} />,\n    rook: <RookIcon className=\"pieces white_pieces\" height={70} />,\n  },\n};\n","import React, {\n  FC,\n  MouseEvent,\n  MouseEventHandler,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport CSS from \"csstype\";\n\nimport Tile from \"../components/Tile\";\nimport {\n  BoardClass,\n  IMovePiece,\n  ITilePosition,\n  SelectedTile,\n  TileClass,\n} from \"types/Board\";\n\nimport { maskSideInEnum, SideEnum } from \"types/Side\";\nimport { classic, classic_outlined } from \"designs/pieces\";\n\nimport { BoardContext } from \"context/Board\";\nimport { io } from 'socket.io-client';\n\n\n  const board = new BoardClass(classic);\n\n  const socket = io();\n  \n  export interface PlayerSides{\n    white:string;\n    black:string;\n  }\n\n \nconst Board = () => {\n  // const board = useContext(BoardContext);\n  const [game_id, set_game_id] = useState(\"\");\n  const [disable_pieces, set_disable_pieces] = useState(false);\n  const [player_side, set_player_side] = useState(\"\");\n  const [tiles_data, set_tiles_data] = useState<TileClass[][]>(board.tiles);\n  const [tiles_jsx, set_tiles_jsx] = useState<JSX.Element[][]>();\n  const [selected_tile, set_selected_tile] = useState({} as SelectedTile);\n  const [turn_to_play, set_turn_to_play] = useState(\"white\");\n  const [black_king_on_check, set_black_king_on_check] = useState(false);\n  const [white_king_on_check, set_white_king_on_check] = useState(false);\n  const [last_played, set_last_played] = useState({} as IMovePiece);\n\n  useEffect(() => {\n    socket.on(\"game-id\", (id:string)=>{\n      set_game_id(id);\n    });\n\n\n     socket.on(\"sides\", (sides:PlayerSides)=>{\n      if(sides.white ===socket.id){\n        set_player_side(\"white\");\n      }else{\n        set_player_side(\"black\");\n      }\n\n      updateView();\n      console.log(socket.id, sides);\n    })\n\n    socket.on(\"move\", ({prev, next}: IMovePiece, turn:string)=>{\n      board.movePiece(prev, next);\n      set_turn_to_play(turn);\n      updateView();\n\n      console.log({turn});\n\n    })\n\n  }, [])\n\n  useEffect(() => {\n    map_tile_data_to_jsx();\n\nif(board.sides.black.onCheck) console.log(\"KING IS ON CHECK\");\n      set_black_king_on_check(board.sides.black.onCheck)\n    \n      set_white_king_on_check(board.sides.white.onCheck)\n  \n  }, [tiles_data, selected_tile,black_king_on_check, white_king_on_check, player_side, turn_to_play]);\n\n  function map_tile_data_to_jsx(): void {\n    const tilesDiv = tiles_data.map(\n      (tiles_column: any, column: number): JSX.Element[] => {\n        return tiles_column.map(\n          (tile: TileClass, row: number): JSX.Element => {\n            let show_move: boolean = false;\n            if (selected_tile.possible_moves) {\n              selected_tile.possible_moves.map((position) => {\n                if (position.column === column && position.row === row) {\n                  show_move = true;\n                }\n              });\n            }\n\n            const tile_position = { row, column };\n\n            const validate_king_is_on_check = () => {\n              const { column: white_kings_column, row: white_kings_row } = board.sides.white.king.location as ITilePosition;\n              const { column: black_kings_column, row: black_kings_row } = board.sides.black.king.location as ITilePosition;\n\n              const  current_tile_is_white_king = white_kings_column === column && white_kings_row === row ;\n              const current_tile_is_black_king = black_kings_column === column && black_kings_row === row ;\n\n              return (black_king_on_check && current_tile_is_black_king ) || (white_king_on_check && current_tile_is_white_king);\n            };\n\n            return (\n              <Tile\n                key={row + 1 + ((column + 1)*8)}\n                style={{ transform: player_side===\"white\"?\"rotate(90deg)\":\"rotate(270deg)\" }}\n                tile={tile}\n                on_check={validate_king_is_on_check()}\n                show_move={show_move}\n                tile_position={tile_position}\n                onClick={(event: MouseEvent) => {\n                  if (disable_pieces) return;\n                  if (tile.piece && tile.piece.side === player_side) {\n                    const moves = board.possible_moves_from_tile({\n                      row,\n                      column,\n                    });\n                    set_selected_tile(() => ({\n                      position: tile_position,\n                      possible_moves: moves,\n                    }));\n                  }\n\n                  if (show_move && turn_to_play === player_side) {\n                    const new_move = board.movePiece(selected_tile.position, tile_position);\n                    socket.emit(\"send-move\", game_id, new_move, next_turn());\n                    set_turn_to_play(next_turn());\n                    updateView();\n                    set_selected_tile(() => ({\n                      position: selected_tile.position,\n                      possible_moves: [],\n                    }));\n                  }\n                }}\n              />\n            );\n          }\n        );\n      }\n    );\n\n    set_tiles_jsx(tilesDiv);\n  }\n\n const next_turn=()=>{\n  return   player_side === \"white\"?\"black\":\"white\";\n }\n\n  const updateView = () => {\n    set_last_played(board.moves[board.moves.length-1]);\n    set_tiles_data(() => board.tiles);\n    console.log(board.tiles);\n  };\n\n  const boardStyle: CSS.Properties = {\n    display: \"grid\",\n    gridTemplateColumns: \"repeat(8, 1fr)\",\n    gridTemplateRows: \"repeat(8, 1fr)\",\n    transform: player_side===\"white\"?\"rotate(-90deg)\":\"rotate(90deg)\",\n    minWidth:\"350px\", \n    minHeight:\"350px\",\n    width:\"80vw\",\n    height:\"80vw\",\n    maxWidth:\"800px\",\n    maxHeight:\"800px\",\n  };\n\n  return (\n    <div >\n    <div style= {{display: \"flex\", justifyContent:\"space-between\", margin:\"10px 50px\", width:\"100%\"}}>\n      <h6>game_id: {game_id}</h6>\n      <h6>My side:{player_side}</h6>\n      <h6>turn:{turn_to_play}</h6>\n    </div>\n      <div style={boardStyle}>{tiles_jsx}</div>\n    </div>\n  );\n};\n\nexport default Board;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport Board from \"containers/Board\";\nimport { classic } from \"designs/pieces\";\nimport { BoardClass } from \"types/Board\";\n\nimport { BoardContext } from \"context/Board\";\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <BoardContext.Provider> */}\n          <Board />\n        {/* </BoardContext.Provider> */}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}