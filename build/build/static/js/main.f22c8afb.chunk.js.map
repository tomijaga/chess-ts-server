{"version":3,"sources":["types/Side.ts","context/Board.tsx","components/Tile.tsx","containers/Board.tsx","designs/pieces/classic/black/bishop.tsx","designs/pieces/classic/black/king.tsx","designs/pieces/classic/black/knight.tsx","designs/pieces/classic/black/queen.tsx","designs/pieces/classic/black/pawn.tsx","designs/pieces/classic/black/rook.tsx","designs/pieces/classic/white/bishop.tsx","designs/pieces/classic/white/king.tsx","designs/pieces/classic/white/knight.tsx","designs/pieces/classic/white/queen.tsx","designs/pieces/classic/white/pawn.tsx","designs/pieces/classic/white/rook.tsx","designs/pieces/classic/index.tsx","usefull-fns/Array.tsx","usefull-fns/Object.tsx","types/Pieces.ts","types/Board.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SideEnum","BoardContext","createContext","Tile","show_move","tile","bg","size","piece","tile_position","row","column","onClick","on_check","style","children","useContext","className","height","width","backgroundColor","fontSize","display","justifyContent","alignItems","icon","position","top","background","borderRadius","bottom","Board","board","useState","disable_pieces","player_side","tiles","tiles_data","set_tiles_data","tiles_jsx","set_tiles_jsx","selected_tile","set_selected_tile","side_to_play","set_side_to_play","set_on_check","useEffect","tilesDiv","map","tiles_column","possible_moves","validate_king_is_on_check","sides","king","location","kings_column","kings_row","transform","event","side","moves","possible_moves_from_tile","movePiece","console","log","updateView","map_tile_data_to_jsx","is_on_check","prev","gridTemplateColumns","gridTemplateRows","BishopIcon","props","xmlns","viewBox","d","fillRule","fill","KingIcon","KnightIcon","QueenIcon","PawnIcon","RookIcon","classic","bishop","queen","knight","pawn","rook","fillArray","item","obj","arr","i","push","Object","assign","create","getPrototypeOf","Piece","_icon","type","hasMoved","this","Rook","design","Bishop","King","Queen","Knight","Pawn","SideClass","pawns","knights","bishops","rooks","capturedPieces","capture","getPieces","side_string","TileClass","color","BoardClass","tile_color_1","tile_color_2","next","position_is_out_of_bounds","Error","prev_tile","next_tile","undefined","newGame","white","black","set_pawns","pieces","length","j","move","index","map_piece_to_move","traverse_tiles","action","movablePositions","linear_recursive_scan","ld","linear_scan","radial_scan","column_change","row_change","limit","Infinity","count","new_column","new_row","newPosition","is_out_of_bounds","positions","row_index","index_on_row","row_is_odd","index_is_even","App","io","reconnection","reconnectionAttempts","reconnectionDelay","reconnectionDelayMax","randomizationFactor","timeout","autoConnect","rejectUnauthorized","Provider","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f22c8afb.chunk.js","sourcesContent":["import { clone } from \"usefull-fns/Object\";\nimport { fillArray } from \"usefull-fns/Array\";\nimport { IDesignPieces } from \"./Design\";\nimport { Bishop, King, Knight, Pawn, Piece, Queen, Rook } from \"./Pieces\";\n\nexport class SideClass {\n  pawns: Pawn[] = [];\n  knights: Knight[] = [];\n  king: King;\n  queen: Queen;\n  bishops: Bishop[] = [];\n  rooks: Rook[] = [];\n  capturedPieces: Piece[] = [];\n\n  constructor(design: IDesignPieces, side: number) {\n    let side_string: string = \"white\";\n\n    if (side === 1) {\n      side_string = \"black\";\n    }\n    if (side_string === \"white\") {\n      this.king = new King(design[\"white\"], \"white\");\n      this.queen = new Queen(design[\"white\"], \"white\");\n      this.pawns[0] = new Pawn(design[\"white\"], \"white\");\n      this.pawns[1] = new Pawn(design[\"white\"], \"white\");\n      this.pawns[2] = new Pawn(design[\"white\"], \"white\");\n      this.pawns[3] = new Pawn(design[\"white\"], \"white\");\n      this.pawns[4] = new Pawn(design[\"white\"], \"white\");\n      this.pawns[5] = new Pawn(design[\"white\"], \"white\");\n      this.pawns[6] = new Pawn(design[\"white\"], \"white\");\n      this.pawns[7] = new Pawn(design[\"white\"], \"white\");\n\n      this.knights = fillArray<Pawn>(new Knight(design[\"white\"], \"white\"), 2);\n      this.rooks = fillArray<Pawn>(new Rook(design[\"white\"], \"white\"), 2);\n      this.bishops = fillArray<Pawn>(new Bishop(design[\"white\"], \"white\"), 2);\n    } else {\n      this.king = new King(design[\"black\"], \"black\");\n      this.queen = new Queen(design[\"black\"], \"black\");\n      this.pawns[0] = new Pawn(design[\"black\"], \"black\");\n      this.pawns[1] = new Pawn(design[\"black\"], \"black\");\n      this.pawns[2] = new Pawn(design[\"black\"], \"black\");\n      this.pawns[3] = new Pawn(design[\"black\"], \"black\");\n      this.pawns[4] = new Pawn(design[\"black\"], \"black\");\n      this.pawns[5] = new Pawn(design[\"black\"], \"black\");\n      this.pawns[6] = new Pawn(design[\"black\"], \"black\");\n      this.pawns[7] = new Pawn(design[\"black\"], \"black\");\n      this.knights = fillArray<Pawn>(new Knight(design[\"black\"], \"black\"), 2);\n      this.rooks = fillArray<Pawn>(new Rook(design[\"black\"], \"black\"), 2);\n      this.bishops = fillArray<Pawn>(new Bishop(design[\"black\"], \"black\"), 2);\n    }\n  }\n\n  capture = (piece: Piece) => {\n    this.capturedPieces.push(piece);\n  };\n\n  getPieces = (): Piece[] => {\n    return [\n      this.king,\n      this.queen,\n      ...this.bishops,\n      ...this.knights,\n      ...this.pawns,\n      ...this.rooks,\n    ];\n  };\n}\n\nexport enum SideEnum {\n  white,\n  black,\n}\n\nexport const maskSideInEnum = (side: string) =>\n  side === \"white\"\n    ? 0\n    : side === \"black\"\n    ? 1\n    : () => {\n        throw new Error('Expecting \"white\" or \"black\" ');\n      };\n","import { createContext } from \"react\";\nimport { BoardClass, ITilePosition, SelectedTile } from \"types/Board\";\n\nexport const BoardContext = createContext({} as BoardClass);\n\nexport const SelectedTileContext = createContext({} as SelectedTile);\n","import React, { CSSProperties, FC, MouseEvent, useContext } from \"react\";\nimport CSS from \"csstype\";\n\n// import \"./Tile.scss\";\nimport { ITilePosition, TileClass } from \"../types/Board\";\nimport { BoardContext } from \"context/Board\";\n\nconst Tile: FC<{\n  tile: TileClass;\n  onClick: (event: MouseEvent) => void;\n  on_check: boolean;\n  show_move: boolean;\n  tile_position: ITilePosition;\n  style: CSSProperties;\n}> = ({\n  show_move,\n  tile: { bg, size, piece },\n  tile_position: { row, column },\n  onClick,\n  on_check,\n  style,\n  children,\n}) => {\n  const board = useContext(BoardContext);\n\n  return (\n    <>\n      <div\n        onClick={onClick}\n        className=\"tile\"\n        style={{\n          height: size,\n          width: size,\n          backgroundColor: on_check ? \"green\" : bg,\n          fontSize: \"small\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          ...style,\n        }}\n      >\n        {piece?.icon ? piece.icon : <></>}\n        {show_move === true ? (\n          <div\n            style={{\n              width: \"30px\",\n              height: \"30px\",\n              position: \"absolute\",\n              top: \"40%\",\n              background: \"rgba(14, 143, 212, 0.5)\",\n              borderRadius: \"50%\",\n            }}\n          ></div>\n        ) : (\n          <></>\n        )}\n\n        <div style={{ position: \"absolute\", bottom: \"0%\", display: \"flex\" }}>\n          {\" \"}\n          <div>[{row}]</div>\n          <div>[{column}]</div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Tile;\n","import React, {\n  FC,\n  MouseEvent,\n  MouseEventHandler,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport CSS from \"csstype\";\n\nimport Tile from \"../components/Tile\";\nimport {\n  BoardClass,\n  ITilePosition,\n  SelectedTile,\n  TileClass,\n} from \"types/Board\";\n\nimport { maskSideInEnum, SideEnum } from \"types/Side\";\n\nimport { BoardContext } from \"context/Board\";\n\nconst Board = () => {\n  const board = useContext(BoardContext);\n  const [disable_pieces, set_disable_pieces] = useState(false);\n  const [player_side, set_player_side] = useState(\"white\");\n  const [tiles_data, set_tiles_data] = useState<TileClass[][]>(board.tiles);\n  const [tiles_jsx, set_tiles_jsx] = useState<JSX.Element[][]>();\n  const [selected_tile, set_selected_tile] = useState({} as SelectedTile);\n  const [side_to_play, set_side_to_play] = useState(\"white\");\n  const [on_check, set_on_check] = useState(false);\n\n  useEffect(() => {\n    map_tile_data_to_jsx();\n\n    if (board.is_on_check(player_side)) {\n      set_on_check(true);\n      console.log(\"King on Check\");\n    } else {\n      set_on_check(false);\n    }\n  }, [tiles_data, selected_tile, on_check]);\n\n  function map_tile_data_to_jsx(): void {\n    const tilesDiv = tiles_data.map(\n      (tiles_column: any, column: number): JSX.Element[] => {\n        return tiles_column.map(\n          (tile: TileClass, row: number): JSX.Element => {\n            let show_move: boolean = false;\n            if (selected_tile.possible_moves) {\n              selected_tile.possible_moves.map((position) => {\n                if (position.column === column && position.row === row) {\n                  show_move = true;\n                }\n              });\n            }\n\n            const tile_position = { row, column };\n\n            const validate_king_is_on_check = () => {\n              const { column: kings_column, row: kings_row } = board.sides[\n                \"white\"\n              ].king.location as ITilePosition;\n              return on_check && kings_column === column && kings_row === row;\n            };\n\n            return (\n              <Tile\n                key={row + 1 + (column + 1) * (row + 1)}\n                style={{ transform: \"rotate(90deg)\" }}\n                tile={tile}\n                on_check={on_check && validate_king_is_on_check()}\n                show_move={show_move}\n                tile_position={tile_position}\n                onClick={(event: MouseEvent) => {\n                  if (disable_pieces) return;\n                  if (tile.piece && tile.piece.side === side_to_play) {\n                    const moves = board.possible_moves_from_tile({\n                      row,\n                      column,\n                    });\n                    set_selected_tile(() => ({\n                      position: tile_position,\n                      possible_moves: moves,\n                    }));\n                  }\n\n                  if (show_move) {\n                    board.movePiece(selected_tile.position, tile_position);\n                    console.log(\"showmove\");\n                    updateView();\n                    set_selected_tile(() => ({\n                      position: selected_tile.position,\n                      possible_moves: [],\n                    }));\n                  }\n                }}\n              />\n            );\n          }\n        );\n      }\n    );\n\n    set_tiles_jsx(tilesDiv);\n  }\n\n  const updateView = () => {\n    set_side_to_play((prev) => (prev === \"white\" ? \"black\" : \"white\"));\n    set_tiles_data(() => board.tiles);\n    console.log(board.tiles);\n  };\n\n  const boardStyle: CSS.Properties = {\n    display: \"grid\",\n    gridTemplateColumns: \"repeat(8, 1fr)\",\n    gridTemplateRows: \"repeat(8, 1fr)\",\n    transform: \"rotate(-90deg)\",\n  };\n\n  return (\n    <>\n      <div style={boardStyle}>{tiles_jsx}</div>;\n    </>\n  );\n};\n\nexport default Board;\n","import * as React from \"react\";\n\nexport const BishopIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 40 75\"\n    height={70}\n    width={70}\n    {...props}\n  >\n    <path\n      d=\"M10 10.47a8.675 8.675 0 011.498-3.683 7.575 7.575 0 002.948 4.046 1 1 0 101.108-1.665 6.506 6.506 0 01-2.517-4.704 64.574 64.574 0 013.208-4.11.997.997 0 011.51.001C21.665 4.989 24 8.771 24 10.47A6.436 6.436 0 0120.688 16h-7.376A6.436 6.436 0 0110 10.47zM8 20v-1c0-.552.448-1 1-1h16c.552 0 1 .448 1 1v1c0 .552-.448 1-1 1H9c-.552 0-1-.448-1-1zm4 3h10v11H12V23zM8 37c0-.552.448-1 1-1h16c.552 0 1 .448 1 1v2c0 .552-.448 1-1 1H9c-.552 0-1-.448-1-1v-2zm-4.933 9.475a2 2 0 011.156-2.615L9.183 42h15.635l4.96 1.86a2 2 0 011.155 2.615L30.323 48H3.677l-.61-1.525zM34 55c0 .552-.448 1-1 1h-1v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2H8v-2a1 1 0 00-2 0v2H4v-2a1 1 0 00-2 0v2H1c-.552 0-1-.448-1-1v-4c0-.552.448-1 1-1h32c.552 0 1 .448 1 1v4z\"\n      fillRule=\"nonzero\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import * as React from \"react\";\n\nexport const KingIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 40 75\"\n    height={70}\n    width={70}\n    {...props}\n  >\n    <g fillRule=\"nonzero\" fill=\"currentColor\">\n      <path d=\"M10.072 10.914a.837.837 0 01.018-.717c.155-.293.43-.505.753-.579L17 8.033l6.157 1.585c.324.074.598.286.753.58.113.223.12.487.018.716L22.163 15H11.837l-1.765-4.086zM8 18c0-.552.448-1 1-1h16a1 1 0 010 2H9c-.552 0-1-.448-1-1zm4 3h10v17H12V21zM9 40h16a1 1 0 010 2H9a1 1 0 010-2zm-5.933 8.475a2 2 0 011.156-2.615L9.183 44h15.635l4.96 1.86a2 2 0 011.155 2.615L30.323 50H3.677l-.61-1.525zM34 57c0 .552-.448 1-1 1h-1v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2H8v-2a1 1 0 00-2 0v2H4v-2a1 1 0 00-2 0v2H1c-.552 0-1-.448-1-1v-4c0-.552.448-1 1-1h32c.552 0 1 .448 1 1v4zM16 7.2V1a1 1 0 012 0v6.2L17 7l-1 .2z\" />\n      <path d=\"M19 4h-4a1 1 0 010-2h4a1 1 0 010 2z\" />\n    </g>\n  </svg>\n);\n","import * as React from \"react\";\n\nexport const KnightIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 40 75\"\n    height={70}\n    width={70}\n    {...props}\n  >\n    <path\n      d=\"M9 41.001c-.552 0-1-.447-1-1v-2c0-.552.448-.999 1-1h16c.552.001 1 .448 1 1v2c0 .553-.448 1-1 1H9zm20.055-7.097A2.004 2.004 0 0127.215 35h-6.654c.038-.042.08-.08.116-.123a5.987 5.987 0 001.339-4.863l-1.41-8.455 8.245 10.526c.423.512.503 1.226.204 1.82zM5.123 9.573a9.9 9.9 0 015.305-3.959 22.518 22.518 0 00-6 12.228c-.822-3.35-.607-6.128.695-8.27zm.897 12.894c.17-9.708 4.758-14.706 7.114-16.629-.012.257-.02.52-.02.793a1 1 0 002 0 10.22 10.22 0 011.155-5.142c.192-.312.535-.498.9-.489l2.972-.053v2.257a1.954 1.954 0 001.128 1.752l2.643 1.247a14.917 14.917 0 014.598 3.351l3.092 3.336a1.758 1.758 0 01-.083 2.467l-1.49 1.37-2.333-1.468c-1.388-.873-3.787-1.482-7.129-1.81a3.025 3.025 0 00-2.949 1.523 2.785 2.785 0 00.258 3.1l.155.199 2.012 12.072a3.991 3.991 0 01-.893 3.242A4.047 4.047 0 0116 35H8.09a1.935 1.935 0 01-2.012-1.842V22.737a.99.99 0 00-.057-.27zm-2.953 25.01a2 2 0 011.156-2.616l4.96-1.86h15.635l4.96 1.86a2 2 0 011.155 2.616L30.323 49H3.677l-.61-1.525zM34 56c0 .553-.448 1-1 1h-1v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2H8v-2a1 1 0 00-2 0v2H4v-2a1 1 0 00-2 0v2H1c-.552 0-1-.447-1-1v-4c0-.552.448-.999 1-1h1.997l.003.001h30c.552 0 1 .447 1 1v4z\"\n      fillRule=\"nonzero\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import * as React from \"react\";\n\nexport const QueenIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 40 75\"\n    height={70}\n    width={70}\n    {...props}\n  >\n    <g fillRule=\"nonzero\" fill=\"currentColor\">\n      <path d=\"M17 0a2.006 2.006 0 00-2 2c-.002.413.128.816.37 1.15 1.077-.2 2.183-.2 3.26 0 .242-.334.372-.737.37-1.15a2.006 2.006 0 00-2-2zm-5.2 6.94c-.02.02-.05.04-.07.06h.09l-.02-.06zm10.4 0l-.02.06h.09c-.02-.02-.05-.04-.07-.06zm0 0l-.02.06h.09c-.02-.02-.05-.04-.07-.06zM25 15H9a1 1 0 000 2h16a1 1 0 000-2zm-13 4v17h10V19H12zm13 19H9a1 1 0 000 2h16a1 1 0 000-2zm5.91 6.93a1.981 1.981 0 00-1.13-1.07L24.82 42H9.18l-4.96 1.86a1.981 1.981 0 00-1.13 1.07 2.03 2.03 0 00-.02 1.55L3.68 48h26.64l.61-1.52a2.03 2.03 0 00-.02-1.55zM33 50H1a1.003 1.003 0 00-1 1v4c.002.552.448.998 1 1h1v-2a1 1 0 012 0v2h2v-2a1 1 0 012 0v2h2v-2a1 1 0 012 0v2h2v-2a1 1 0 012 0v2h2v-2a1 1 0 012 0v2h2v-2a1 1 0 012 0v2h2v-2a1 1 0 012 0v2h2v-2a1 1 0 012 0v2h1a1.003 1.003 0 001-1v-4a1.003 1.003 0 00-1-1z\" />\n      <path d=\"M24.85 5.32L23.62 9h-.01l-1.33 4H11.71L9.15 5.32a1.002 1.002 0 111.9-.64l.75 2.26c-.02.02-.05.04-.07.06h.09l-.02-.06a7.94 7.94 0 0110.4 0l-.02.06h.09c-.02-.02-.05-.04-.07-.06l.75-2.26a1.002 1.002 0 111.9.64z\" />\n      <path d=\"M11.82 7h-.09c.02-.02.05-.04.07-.06l.02.06zM22.27 7h-.09l.02-.06c.02.02.05.04.07.06z\" />\n    </g>\n  </svg>\n);\n","import * as React from \"react\";\n\nexport const PawnIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 40 75\"\n    height={70}\n    width={70}\n    {...props}\n  >\n    <path\n      d=\"M13.05 2.05a7 7 0 119.901 9.898 7 7 0 01-9.9-9.898zm1.498 15.797a33.035 33.035 0 00-.561-2.796 8.96 8.96 0 008.027 0c-.226.92-.417 1.86-.562 2.795L21.43 18h-6.86l-.022-.153zM9 23v-2c0-.552.448-1 1-1h16c.552 0 1 .448 1 1v2c0 .552-.448 1-1 1H10c-.552 0-1-.448-1-1zm5.76 3h6.482a25.675 25.675 0 002.154 8H12.605a25.454 25.454 0 002.155-8zM7 37c0-.552.448-1 1-1h20c.552 0 1 .448 1 1v2c0 .552-.448 1-1 1H8c-.552 0-1-.448-1-1v-2zm-5.906 7.925a1.985 1.985 0 011.128-1.065l5.13-1.923.011-.008c.21.046.423.07.637.071h20c.214 0 .428-.025.637-.071l.012.008 5.13 1.923a2 2 0 011.154 2.615L34.323 48H1.677l-.61-1.525a1.987 1.987 0 01.027-1.55zM36 55c0 .552-.448 1-1 1h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2H9v-2a1 1 0 00-2 0v2H5v-2a1 1 0 00-2 0v2H1c-.552 0-1-.448-1-1v-4c0-.551.447-.998.999-1H35c.552.002.998.449.999 1v4z\"\n      fillRule=\"nonzero\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import * as React from \"react\";\n\nexport const RookIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 40 75\"\n    height={70}\n    width={70}\n    {...props}\n  >\n    <path\n      d=\"M5 0h2v2a2.002 2.002 0 002 2h2a2.002 2.002 0 002-2V0h2v2a2.003 2.003 0 001.999 2H19A2.003 2.003 0 0021 2V0h2v2a2.002 2.002 0 002 2h2a2.002 2.002 0 002-2V0h2v5.871a4.023 4.023 0 01-1.228 2.884L28.477 10H7.523L6.228 8.755A4.022 4.022 0 015 5.87V0zm2 15v-2c0-.552.448-1 1-1h20c.552 0 1 .448 1 1v2c0 .552-.448 1-1 1H8c-.552 0-1-.448-1-1zm3 3h16v16H10V18zM7 37c0-.552.448-1 1-1h20c.552 0 1 .448 1 1v2c0 .552-.448 1-1 1H8c-.552 0-1-.448-1-1v-2zm-5.906 7.925a1.985 1.985 0 011.128-1.065l5.13-1.923.011-.008c.21.046.423.07.637.071h20c.214 0 .428-.025.637-.071l.012.008 5.13 1.922a2 2 0 011.154 2.616L34.323 48H1.677l-.61-1.525a1.987 1.987 0 01.027-1.55zM36 55c0 .552-.448 1-1 1h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2H9v-2a1 1 0 00-2 0v2H5v-2a1 1 0 00-2 0v2H1c-.552 0-1-.448-1-1v-4c0-.551.447-.998.999-1H35A1 1 0 0136 51v4z\"\n      fillRule=\"nonzero\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import * as React from \"react\";\n\nexport const BishopIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 40 75\"\n    height={70}\n    width={70}\n    {...props}\n  >\n    <path\n      d=\"M3 60h32a3.003 3.003 0 003-3v-4a3.003 3.003 0 00-3-3h-.523l.313-.782a4.001 4.001 0 00-2.31-5.231l-3.112-1.167A2.97 2.97 0 0030 41v-2a3.003 3.003 0 00-3-3h-1V25h1a3.003 3.003 0 003-3v-1a3.003 3.003 0 00-3-3h-1.176A8.258 8.258 0 0028 12.47c0-2.847-3.652-7.774-6.716-11.404a2.976 2.976 0 00-4.568-.001C13.652 4.696 10 9.623 10 12.47c.014 2.05.79 4.02 2.176 5.53H11a3.003 3.003 0 00-3 3v1a3.003 3.003 0 003 3h1v11h-1a3.003 3.003 0 00-3 3v2c.003.66.225 1.3.632 1.82L5.52 43.987a4.001 4.001 0 00-2.31 5.231l.313.782H3a3.003 3.003 0 00-3 3v4a3.003 3.003 0 003 3zm9-47.53a8.675 8.675 0 011.498-3.683 7.575 7.575 0 002.948 4.046 1 1 0 101.108-1.665 6.506 6.506 0 01-2.517-4.704 64.574 64.574 0 013.208-4.11.997.997 0 011.51.001C23.665 6.989 26 10.771 26 12.47A6.436 6.436 0 0122.688 18h-7.376A6.436 6.436 0 0112 12.47zM10 22v-1c0-.552.448-1 1-1h16c.552 0 1 .448 1 1v1c0 .552-.448 1-1 1H11c-.552 0-1-.448-1-1zm4 3h10v11H14V25zm-4 14c0-.552.448-1 1-1h16c.552 0 1 .448 1 1v2c0 .552-.448 1-1 1H11c-.552 0-1-.448-1-1v-2zm-4.933 9.475a2 2 0 011.156-2.615l4.96-1.86h15.635l4.96 1.86a2 2 0 011.155 2.615L32.323 50H5.677l-.61-1.525zM2 53c0-.552.448-1 1-1h32c.552 0 1 .448 1 1v4c0 .552-.448 1-1 1h-1v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2H6v-2a1 1 0 00-2 0v2H3c-.552 0-1-.448-1-1v-4z\"\n      fillRule=\"nonzero\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import * as React from \"react\";\n\nexport const KingIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 40 75\"\n    height={70}\n    width={70}\n    {...props}\n  >\n    <path\n      d=\"M3 60h32a3.003 3.003 0 003-3v-4a3.003 3.003 0 00-3-3h-.523l.313-.782a4.001 4.001 0 00-2.31-5.231l-3.112-1.167A2.97 2.97 0 0030 41a3.003 3.003 0 00-3-3h-1V21h1a3 3 0 000-6h-.659l1.423-3.292c.331-.767.31-1.64-.058-2.39a3.13 3.13 0 00-2.05-1.636L20 6.225V4h1a1 1 0 000-2h-1V1a1 1 0 00-2 0v1h-1a1 1 0 000 2h1v2.225l-5.655 1.457a3.13 3.13 0 00-2.051 1.635 2.852 2.852 0 00-.058 2.39L11.66 15H11a3 3 0 000 6h1v17h-1a3.003 3.003 0 00-3 3c.003.66.225 1.3.632 1.82L5.52 43.987a4.001 4.001 0 00-2.31 5.231l.313.782H3a3.003 3.003 0 00-3 3v4a3.003 3.003 0 003 3zm9.072-49.086a.837.837 0 01.018-.717c.155-.293.43-.505.753-.579L19 8.033l6.157 1.585c.324.074.598.286.753.58.113.223.12.487.018.716L24.163 15H13.837l-1.765-4.086zM10 18c0-.552.448-1 1-1h16a1 1 0 010 2H11c-.552 0-1-.448-1-1zm4 3h10v17H14V21zm-3 19h16a1 1 0 010 2H11a1 1 0 010-2zm-5.933 8.475a2 2 0 011.156-2.615l4.96-1.86h15.635l4.96 1.86a2 2 0 011.155 2.615L32.323 50H5.677l-.61-1.525zM2 53c0-.552.448-1 1-1h32c.552 0 1 .448 1 1v4c0 .552-.448 1-1 1h-1v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2H6v-2a1 1 0 00-2 0v2H3c-.552 0-1-.448-1-1v-4z\"\n      fillRule=\"nonzero\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import * as React from \"react\";\n\nexport const KnightIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 40 75\"\n    height={70}\n    width={70}\n    {...props}\n  >\n    <path\n      d=\"M35 50.001h-.523l.313-.782a4.001 4.001 0 00-2.31-5.23l-3.112-1.168a2.97 2.97 0 00.632-1.82v-2a2.969 2.969 0 00-.197-1.041 3.957 3.957 0 003.05-2.18 3.653 3.653 0 00-.428-3.928L21.45 17.84a.795.795 0 01-.079-.904 1.004 1.004 0 011.001-.497c2.987.294 5.152.817 6.26 1.514l2.334 1.469a2.033 2.033 0 002.477-.243l1.449-1.366a3.765 3.765 0 00.176-5.282l-3.091-3.335a16.896 16.896 0 00-5.211-3.8l-2.625-1.19V1.946A1.979 1.979 0 0022.137 0H19.17a3.031 3.031 0 00-2.635 1.493 9.92 9.92 0 00-.95 2.34c-1.689.186-7.389 1.142-10.163 5.688-2.17 3.557-1.967 8.353.587 14.253 0 .078-.009.148-.009.226 0 .133.027.265.078.387v9.77A3.828 3.828 0 008.36 37.61 2.961 2.961 0 008 39v2c.003.66.225 1.3.632 1.82L5.52 43.988a4 4 0 00-2.31 5.23l.313.783H3a3.003 3.003 0 00-3 3v4a3.004 3.004 0 003 3.001h32a3.004 3.004 0 003-3v-4a3.003 3.003 0 00-3-3zm-24-8c-.552 0-1-.447-1-1v-2c0-.552.448-.999 1-1h16c.552.001 1 .448 1 1v2c0 .553-.448 1-1 1H11zm20.055-7.097A2.004 2.004 0 0129.215 36h-6.654c.038-.042.08-.08.116-.123a5.987 5.987 0 001.339-4.863l-1.41-8.455 8.245 10.526c.423.512.503 1.226.204 1.82zM7.123 10.573a9.9 9.9 0 015.305-3.959 22.518 22.518 0 00-6 12.228c-.822-3.35-.607-6.128.695-8.27zm.897 12.894c.17-9.708 4.758-14.706 7.114-16.629-.012.257-.02.52-.02.793a1 1 0 002 0 10.22 10.22 0 011.155-5.142c.192-.312.535-.498.9-.489l2.972-.053v2.257a1.954 1.954 0 001.128 1.752l2.643 1.247a14.917 14.917 0 014.598 3.351l3.092 3.336a1.758 1.758 0 01-.083 2.467l-1.49 1.37-2.333-1.468c-1.388-.873-3.787-1.482-7.129-1.81a3.025 3.025 0 00-2.949 1.523 2.785 2.785 0 00.258 3.1l.155.199 2.012 12.072a3.991 3.991 0 01-.893 3.242A4.047 4.047 0 0118 36h-7.91a1.935 1.935 0 01-2.012-1.842V23.737a.99.99 0 00-.057-.27zm-2.953 25.01a2 2 0 011.156-2.616l4.96-1.86h15.635l4.96 1.86a2 2 0 011.155 2.616L32.323 50H5.677l-.61-1.525zM36 57c0 .553-.448 1-1 1h-1v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2H6v-2a1 1 0 00-2 0v2H3c-.552 0-1-.447-1-1v-4c0-.552.448-.999 1-1h1.997l.003.001h30c.552 0 1 .447 1 1v4z\"\n      fillRule=\"nonzero\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import * as React from \"react\";\n\nexport const QueenIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 40 75\"\n    height={70}\n    width={70}\n    {...props}\n  >\n    <path\n      d=\"M3 60h32a3.003 3.003 0 003-3v-4a3.003 3.003 0 00-3-3h-.523l.313-.782a4.001 4.001 0 00-2.31-5.231l-3.112-1.167A2.97 2.97 0 0030 41a3.003 3.003 0 00-3-3h-1V21h1a3 3 0 000-6h-.613l1.389-4.166.01-.028 1.162-3.49a1 1 0 10-1.896-.632l-.571 1.713a9.984 9.984 0 00-3.86-2.703 4 4 0 10-7.241 0 9.984 9.984 0 00-3.86 2.703l-.572-1.713a1 1 0 10-1.896.632l1.163 3.49.01.028L11.612 15H11a3 3 0 000 6h1v17h-1a3.003 3.003 0 00-3 3c.003.66.225 1.3.632 1.82L5.52 43.987a4.001 4.001 0 00-2.31 5.231l.313.782H3a3.003 3.003 0 00-3 3v4a3.003 3.003 0 003 3zM19 7a7.993 7.993 0 015.266 2H13.734A7.993 7.993 0 0119 7zm-2-3a2 2 0 113.635 1.15c-1.08-.2-2.19-.2-3.27 0A1.977 1.977 0 0117 4zm-4.613 7h13.226l-1.333 4H13.72l-1.333-4zM10 18c0-.552.448-1 1-1h16a1 1 0 010 2H11c-.552 0-1-.448-1-1zm4 3h10v17H14V21zm-3 19h16a1 1 0 010 2H11a1 1 0 010-2zm-5.933 8.475a2 2 0 011.156-2.615l4.96-1.86h15.635l4.96 1.86a2 2 0 011.155 2.615L32.323 50H5.677l-.61-1.525zM2 53c0-.552.448-1 1-1h32c.552 0 1 .448 1 1v4c0 .552-.448 1-1 1h-1v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2H6v-2a1 1 0 00-2 0v2H3c-.552 0-1-.448-1-1v-4z\"\n      fillRule=\"nonzero\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import * as React from \"react\";\n\nexport const PawnIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 40 75\"\n    height={70}\n    width={70}\n    {...props}\n  >\n    <path\n      d=\"M3 60h34a3.003 3.003 0 003-3v-4a2.993 2.993 0 00-1.656-2.667l.446-1.115a4 4 0 00-2.31-5.231l-3.909-1.466c.278-.459.426-.985.429-1.521v-2a3.003 3.003 0 00-3-3h-2.528a.98.98 0 00-.091-.434A23.55 23.55 0 0125.254 28H28a3.003 3.003 0 003-3v-2a3.003 3.003 0 00-3-3h-2.544a30.257 30.257 0 011.246-5.009 9 9 0 10-13.404 0A30.244 30.244 0 0114.544 20H12a3.003 3.003 0 00-3 3v2a3.003 3.003 0 003 3h2.749a23.384 23.384 0 01-2.13 7.566.98.98 0 00-.09.434H10a3.003 3.003 0 00-3 3v2c.003.536.15 1.062.429 1.521l-3.91 1.466a4 4 0 00-2.309 5.231l.446 1.115A2.993 2.993 0 000 53v4a3.003 3.003 0 003 3zm35-3c0 .552-.448 1-1 1h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2H7v-2a1 1 0 00-2 0v2H3c-.552 0-1-.448-1-1v-4c0-.551.447-.998.999-1H37c.552.002.998.449.999 1v4zM15.05 4.05a7 7 0 119.901 9.898 7 7 0 01-9.9-9.898zm1.498 15.797a33.035 33.035 0 00-.561-2.796 8.96 8.96 0 008.027 0c-.226.92-.417 1.86-.562 2.795L23.43 20h-6.86l-.022-.153zM11 25v-2c0-.552.448-1 1-1h16c.552 0 1 .448 1 1v2c0 .552-.448 1-1 1H12c-.552 0-1-.448-1-1zm5.76 3h6.482a25.675 25.675 0 002.154 8H14.605a25.454 25.454 0 002.155-8zM9 39c0-.552.448-1 1-1h20c.552 0 1 .448 1 1v2c0 .552-.448 1-1 1H10c-.552 0-1-.448-1-1v-2zm-5.906 7.925a1.985 1.985 0 011.128-1.065l5.13-1.923.011-.008c.21.046.423.07.637.071h20c.214 0 .428-.025.637-.071l.012.008 5.13 1.923a2 2 0 011.154 2.615L36.323 50H3.677l-.61-1.525a1.987 1.987 0 01.027-1.55z\"\n      fillRule=\"nonzero\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import * as React from \"react\";\n\nexport const RookIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 40 75\"\n    height={70}\n    width={70}\n    {...props}\n  >\n    <path\n      d=\"M3 60h34a3.003 3.003 0 003-3v-4a2.993 2.993 0 00-1.656-2.667l.446-1.115a4.001 4.001 0 00-2.31-5.231l-3.909-1.466c.278-.459.426-.985.429-1.521v-2a3.003 3.003 0 00-3-3V20a3.003 3.003 0 003-3v-2a2.973 2.973 0 00-.735-1.945l.894-.859A6.031 6.031 0 0035 7.871V2a2.002 2.002 0 00-2-2h-2a2.002 2.002 0 00-2 2v2h-2V2a2.002 2.002 0 00-2-2h-2a2.002 2.002 0 00-2 2v2h-2V2a2.002 2.002 0 00-2-2h-2a2.002 2.002 0 00-2 2v2h-2V2a2.002 2.002 0 00-2-2H7a2.002 2.002 0 00-2 2v5.871a6.03 6.03 0 001.842 4.325l.893.859A2.973 2.973 0 007 15v2a3.003 3.003 0 003 3v16a3.003 3.003 0 00-3 3v2c.003.536.15 1.062.429 1.521l-3.91 1.466a4 4 0 00-2.309 5.231l.446 1.115A2.993 2.993 0 000 53v4a3.003 3.003 0 003 3zm35-3c0 .552-.448 1-1 1h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2h-2v-2a1 1 0 00-2 0v2H7v-2a1 1 0 00-2 0v2H3c-.552 0-1-.448-1-1v-4c0-.551.447-.998.999-1H37A1 1 0 0138 53v4zM7 2h2v2a2.002 2.002 0 002 2h2a2.002 2.002 0 002-2V2h2v2a2.003 2.003 0 001.999 2H21A2.003 2.003 0 0023 4V2h2v2a2.002 2.002 0 002 2h2a2.002 2.002 0 002-2V2h2v5.871a4.023 4.023 0 01-1.228 2.884L30.477 12H9.523l-1.295-1.245A4.022 4.022 0 017 7.87V2zm2 15v-2c0-.552.448-1 1-1h20c.552 0 1 .448 1 1v2c0 .552-.448 1-1 1H10c-.552 0-1-.448-1-1zm3 3h16v16H12V20zM9 39c0-.552.448-1 1-1h20c.552 0 1 .448 1 1v2c0 .552-.448 1-1 1H10c-.552 0-1-.448-1-1v-2zm-5.906 7.925a1.985 1.985 0 011.128-1.065l5.13-1.923.011-.008c.21.046.423.07.637.071h20c.214 0 .428-.025.637-.071l.012.008 5.13 1.922a2 2 0 011.154 2.616L36.323 50H3.677l-.61-1.525a1.987 1.987 0 01.027-1.55z\"\n      fillRule=\"nonzero\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import { BishopIcon } from \"./black/bishop\";\nimport { KingIcon } from \"./black/king\";\nimport { KnightIcon } from \"./black/knight\";\nimport { QueenIcon } from \"./black/queen\";\nimport { PawnIcon } from \"./black/pawn\";\nimport { RookIcon } from \"./black/rook\";\n\nimport { BishopIcon as W_BishopIcon } from \"./white/bishop\";\nimport { KingIcon as W_KingIcon } from \"./white/king\";\nimport { KnightIcon as W_KnightIcon } from \"./white/knight\";\nimport { QueenIcon as W_QueenIcon } from \"./white/queen\";\nimport { PawnIcon as W_PawnIcon } from \"./white/pawn\";\nimport { RookIcon as W_RookIcon } from \"./white/rook\";\n\nimport { IDesignPieces } from \"types/Design\";\n\nexport const classic: IDesignPieces = {\n  [\"black\"]: {\n    bishop: <BishopIcon />,\n    king: <KingIcon />,\n    queen: <QueenIcon />,\n    knight: <KnightIcon />,\n    pawn: <PawnIcon />,\n    rook: <RookIcon />,\n  },\n  [\"white\"]: {\n    bishop: <W_BishopIcon />,\n    king: <W_KingIcon />,\n    queen: <W_QueenIcon />,\n    knight: <W_KnightIcon />,\n    pawn: <W_PawnIcon />,\n    rook: <W_RookIcon />,\n  },\n};\n","import { Pawn } from \"types/Pieces\";\nimport { clone } from \"usefull-fns/Object\";\n\nexport const fillArray = <T extends unknown>(item: any, size: number): T[] => {\n  const arr: T[] = [];\n\n  for (let i = 0; i < size; i++) {\n    if (typeof item === \"object\") {\n      arr.push(clone(item));\n    }\n    arr.push(item);\n  }\n  return arr;\n};\n","export const clone = (obj: object) =>\n  Object.assign(Object.create(Object.getPrototypeOf(obj)), obj);\n","import { ITilePosition } from \"./Board\";\nimport { ISidePieces } from \"./Design\";\n\nexport class Piece {\n  icon: JSX.Element;\n  type: string;\n  side: string;\n  hasMoved: boolean = false;\n  location: ITilePosition | null = null;\n\n  constructor(_icon: JSX.Element, type: string, side: string) {\n    this.icon = _icon;\n    this.type = type;\n    this.side = side;\n  }\n}\n\nexport class Rook extends Piece {\n  constructor(design: ISidePieces, side: string) {\n    super(design.rook, \"rook\", side);\n  }\n}\n\nexport class Bishop extends Piece {\n  constructor(design: ISidePieces, side: string) {\n    super(design.bishop, \"bishop\", side);\n  }\n}\n\nexport class King extends Piece {\n  constructor(design: ISidePieces, side: string) {\n    super(design.king, \"king\", side);\n  }\n}\n\nexport class Queen extends Piece {\n  constructor(design: ISidePieces, side: string) {\n    super(design.queen, \"queen\", side);\n  }\n}\n\nexport class Knight extends Piece {\n  constructor(design: ISidePieces, side: string) {\n    super(design.knight, \"knight\", side);\n  }\n}\n\nexport class Pawn extends Piece {\n  constructor(design: ISidePieces, side: string) {\n    super(design.pawn, \"pawn\", side);\n  }\n}\n","import {\n  collapseTextChangeRangesAcrossMultipleVersions,\n  VoidExpression,\n} from \"typescript\";\nimport { IDesignPieces } from \"./Design\";\nimport { Piece } from \"./Pieces\";\nimport { SideEnum, SideClass } from \"./Side\";\nimport { clone } from \"usefull-fns/Object\";\n\nexport interface ITilePosition {\n  row: number;\n  column: number;\n}\n\nexport interface SelectedTile {\n  position: ITilePosition;\n  possible_moves: ITilePosition[];\n}\n\nexport interface IMovePiece {\n  prev: ITilePosition;\n  next: ITilePosition;\n}\n\nexport class TileClass {\n  bg: string;\n  piece?: Piece;\n  size: string = \"90px\";\n\n  constructor(color: string) {\n    this.bg = color;\n  }\n}\n\nexport interface BoardSides {\n  white: SideClass;\n  black: SideClass;\n}\n\nexport class BoardClass {\n  tile_color_1: string;\n  tile_color_2: string;\n  sides: BoardSides;\n  moves: IMovePiece[] = [];\n  tiles: TileClass[][] = [];\n\n  constructor(design: IDesignPieces) {\n    this.tile_color_1 = \"red\";\n    this.tile_color_2 = \"gold\";\n\n    this.sides = {\n      white: new SideClass(design, SideEnum.white),\n      black: new SideClass(design, SideEnum.black),\n    };\n\n    for (let row_index = 0; row_index < 8; row_index++) {\n      let index_on_row: number = 0;\n      const row: TileClass[] = [];\n\n      const row_is_odd: boolean = row_index % 2 === 1;\n\n      while (index_on_row < 8) {\n        const index_is_even = index_on_row % 2 === 0;\n        let color: string = this.tile_color_1;\n\n        if (row_is_odd) {\n          if (index_is_even) {\n            color = this.tile_color_2;\n          }\n        } else {\n          if (!index_is_even) {\n            color = this.tile_color_2;\n          }\n        }\n\n        row.push(new TileClass(color));\n        index_on_row++;\n      }\n\n      this.tiles.push(row);\n    }\n    console.log(\"Called Constructor\");\n    this.newGame();\n  }\n\n  movePiece = (prev: ITilePosition, next: ITilePosition) => {\n    if (!this.position_is_out_of_bounds(next)) {\n      let prev_tile = this.tiles[prev.column][prev.row];\n      let next_tile = this.tiles[next.column][next.row];\n      console.log({ next_tile, prev_tile });\n\n      if (prev_tile.piece) {\n        //Castling\n        // if(prev_tile.piece.type===\"king\" && !prev_tile.piece.hasMoved){\n        //   const next_column_change = prev_tile.piece.side ===\"white\"?2:-2;\n        //   if(next.column === prev.column + next_column_change){\n        //     const column_change_till_edge = prev_tile.piece.side ===\"white\"?3:-3;\n\n        //     const edge_tile = this.tiles[prev.column+column_change_till_edge][prev.row];\n        //     if(edge_tile.piece && edge_tile.piece.type===\"rook\" && !edge_tile.piece.hasMoved){\n\n        //       return;\n        //     }\n        //   }\n\n        // }\n\n        //set Piece hasMove to true\n        if (!prev_tile.piece.hasMoved) prev_tile.piece.hasMoved = true;\n\n        //capture Piece\n        if (next_tile.piece && prev_tile.piece.side !== next_tile.piece.side) {\n          switch (prev_tile.piece.side) {\n            case \"white\":\n              this.sides[\"white\"].capture(next_tile.piece);\n\n              break;\n            case \"black\":\n              this.sides[\"black\"].capture(next_tile.piece);\n              break;\n\n            default:\n              throw new Error(\"@movePiece. prev_tile's side does not exist \");\n          }\n        }\n\n        //move piece\n        next_tile.piece = prev_tile.piece;\n        next_tile.piece.location = next;\n        prev_tile.piece = undefined;\n        this.moves.push({ prev, next });\n\n        console.log({ next_tile, prev_tile });\n        console.log(this.tiles);\n      } else {\n        throw new Error(\"There was no Piece on Previous Tile\");\n      }\n    } else {\n      throw new Error(\"Next Position Out of Bounds\");\n    }\n  };\n\n  newGame = () => {\n    this.tiles[0][0].piece = this.sides.white.rooks[0];\n    this.sides.white.rooks[0].location = { column: 0, row: 0 };\n    this.tiles[1][0].piece = this.sides.white.knights[0];\n    this.sides.white.knights[0].location = { column: 1, row: 0 };\n    this.tiles[2][0].piece = this.sides.white.bishops[0];\n    this.sides.white.bishops[0].location = { column: 2, row: 0 };\n    this.tiles[3][0].piece = this.sides.white.queen;\n    this.sides.white.queen.location = { column: 3, row: 0 };\n    this.tiles[4][0].piece = this.sides.white.king;\n    this.sides.white.king.location = { column: 4, row: 0 };\n    this.tiles[5][0].piece = this.sides.white.bishops[1];\n    this.sides.white.bishops[1].location = { column: 5, row: 0 };\n    this.tiles[6][0].piece = this.sides.white.knights[1];\n    this.sides.white.knights[1].location = { column: 6, row: 0 };\n    this.tiles[7][0].piece = this.sides.white.rooks[1];\n    this.sides.white.rooks[1].location = { column: 7, row: 0 };\n\n    this.tiles[0][7].piece = this.sides.black.rooks[0];\n    this.sides.black.rooks[0].location = { column: 0, row: 7 };\n    this.tiles[1][7].piece = this.sides.black.knights[0];\n    this.sides.black.knights[0].location = { column: 0, row: 7 };\n    this.tiles[2][7].piece = this.sides.black.bishops[0];\n    this.sides.black.bishops[0].location = { column: 0, row: 7 };\n    this.tiles[3][7].piece = this.sides.black.queen;\n    this.sides.black.queen.location = { column: 0, row: 7 };\n    this.tiles[4][7].piece = this.sides.black.king;\n    this.sides.black.king.location = { column: 0, row: 7 };\n    this.tiles[5][7].piece = this.sides.black.bishops[1];\n    this.sides.black.bishops[1].location = { column: 0, row: 7 };\n    this.tiles[6][7].piece = this.sides.black.knights[1];\n    this.sides.black.knights[1].location = { column: 0, row: 7 };\n    this.tiles[7][7].piece = this.sides.black.rooks[1];\n    this.sides.black.rooks[1].location = { column: 0, row: 7 };\n\n    this.set_pawns();\n  };\n\n  is_on_check = (side: string): boolean | void => {\n    switch (side) {\n      case \"white\":\n        if (this.sides.white.king.location) {\n          const {\n            column: kings_column,\n            row: kings_row,\n          } = this.sides.white.king.location;\n\n          const pieces = this.sides.black.getPieces();\n\n          for (let i = 0; i < pieces.length; ++i) {\n            const piece = pieces[i];\n            if (piece.location) {\n              const possible_moves = this.possible_moves_from_tile(\n                piece.location\n              );\n\n              for (let j = 0; j < possible_moves.length; ++j) {\n                const move = possible_moves[j];\n                if (move.column === kings_column && move.row === kings_row)\n                  return true;\n              }\n            }\n          }\n        }\n\n        break;\n      case \"black\":\n        if (this.sides.black.king.location) {\n          const {\n            column: kings_column,\n            row: kings_row,\n          } = this.sides.black.king.location;\n\n          const pieces = this.sides.white.getPieces();\n\n          for (let i = 0; i < pieces.length; ++i) {\n            const piece = pieces[i];\n            if (piece.location) {\n              const possible_moves = this.possible_moves_from_tile(\n                piece.location\n              );\n\n              for (let j = 0; j < possible_moves.length; ++j) {\n                const move = possible_moves[j];\n                return move.column === kings_column && move.row === kings_row;\n              }\n            }\n          }\n        }\n        break;\n      default:\n        throw Error('parameter side should be either \"white\" or \"black\"');\n    }\n  };\n\n  private set_pawns = () => {\n    for (let index = 0; index < 8; ++index) {\n      this.tiles[index][1].piece = this.sides.white.pawns[index];\n      this.sides.white.pawns[index].location = { column: index, row: 1 };\n\n      this.tiles[index][6].piece = this.sides.black.pawns[index];\n      this.sides.black.pawns[index].location = { column: index, row: 6 };\n    }\n  };\n\n  possible_moves_from_tile = (tile_position: ITilePosition) => {\n    const { column, row } = tile_position;\n\n    const tile = this.tiles[column][row];\n\n    let possible_moves: ITilePosition[] = [];\n\n    if (tile.piece) {\n      possible_moves = this.map_piece_to_move(tile_position, tile.piece);\n    }\n\n    return possible_moves;\n  };\n\n  private traverse_tiles = (action: (tile: TileClass) => void) => {\n    for (let row = 0; row < 8; ++row) {\n      let column: number = 0;\n\n      while (column < 8) {\n        action(this.tiles[column++][row]);\n      }\n    }\n  };\n\n  private map_piece_to_move = (\n    tile_position: ITilePosition,\n    piece: Piece\n  ): ITilePosition[] => {\n    const { row, column } = tile_position;\n    const { side, type } = piece;\n\n    let movablePositions: ITilePosition[] = [];\n\n    switch (type) {\n      case \"bishop\":\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 1, 1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, -1, 1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 1, -1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, -1, -1),\n        ];\n        break;\n\n      case \"pawn\":\n        if (true) {\n          //diagonals\n          let ld = {} as ITilePosition;\n          ld.column = side === \"white\" ? 1 : -1;\n          ld.row = side === \"white\" ? 1 : -1;\n          if (\n            !this.position_is_out_of_bounds({\n              column: column + ld.column,\n              row: row + ld.row,\n            }) &&\n            this.tiles[column + ld.column][row + ld.row].piece !== undefined\n          ) {\n            if (\n              this.tiles[column + ld.column][row + ld.row].piece?.side !== side\n            ) {\n              movablePositions = [\n                ...movablePositions,\n                ...this.linear_scan(tile_position, side, 1, 1),\n              ];\n            }\n          }\n          if (\n            !this.position_is_out_of_bounds({\n              column: column - ld.column,\n              row: row + ld.row,\n            }) &&\n            this.tiles[column - ld.column][row + ld.row].piece !== undefined\n          ) {\n            if (\n              this.tiles[column - ld.column][row + ld.row].piece?.side !== side\n            ) {\n              movablePositions = [\n                ...movablePositions,\n                ...this.linear_scan(tile_position, side, -1, 1),\n              ];\n            }\n          }\n        }\n\n        if (!piece.hasMoved) {\n          console.log(piece.hasMoved);\n\n          movablePositions = [\n            ...movablePositions,\n            ...this.linear_recursive_scan(tile_position, side, 0, 1, 2),\n          ];\n        } else {\n          movablePositions = [\n            ...movablePositions,\n            ...this.linear_recursive_scan(tile_position, side, 0, 1, 1),\n          ];\n        }\n        break;\n\n      case \"queen\":\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 1, 0),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, -1, 0),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 0, 1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 0, -1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 1, 1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, -1, 1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 1, -1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, -1, -1),\n        ];\n        break;\n\n      case \"rook\":\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 1, 0),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, -1, 0),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 0, 1),\n        ];\n        movablePositions = [\n          ...movablePositions,\n          ...this.linear_recursive_scan(tile_position, side, 0, -1),\n        ];\n        break;\n\n      case \"knight\":\n        movablePositions = [\n          ...movablePositions,\n          ...this.radial_scan(tile_position, side, 2, 1),\n        ];\n        break;\n\n      case \"king\":\n        movablePositions = [\n          ...movablePositions,\n          ...this.radial_scan(tile_position, side, 1, 1),\n          ...this.radial_scan(tile_position, side, 1, 0),\n        ];\n\n        if (!piece.hasMoved) {\n          const column_change = side === \"white\" ? 2 : -2;\n\n          if (\n            !this.position_is_out_of_bounds({\n              row,\n              column: column + column_change,\n            }) &&\n            this.tiles[column + column_change][row].piece === undefined\n          ) {\n            movablePositions = [\n              ...movablePositions,\n              ...this.linear_scan(tile_position, side, 2, 0),\n            ];\n          }\n        }\n        break;\n\n      default:\n        break;\n    }\n    return movablePositions;\n  };\n\n  private linear_recursive_scan = (\n    tile_position: ITilePosition,\n    side: string,\n    column_change: number,\n    row_change: number,\n    limit: number = Infinity,\n    count: number = 0\n  ): ITilePosition[] => {\n    count++;\n    const { column, row } = tile_position;\n\n    const new_column =\n      side === \"white\"\n        ? column + column_change * count\n        : column - column_change * count;\n    const new_row =\n      side === \"white\" ? row + row_change * count : row - row_change * count;\n\n    const newPosition: ITilePosition = { column: new_column, row: new_row };\n    const is_out_of_bounds = this.position_is_out_of_bounds(newPosition);\n\n    let positions: ITilePosition[] = [];\n\n    if (!is_out_of_bounds) {\n      let tile = this.tiles[column][row];\n      let next_tile = this.tiles[newPosition.column][newPosition.row];\n\n      if (count <= limit) {\n        if (next_tile.piece === undefined) {\n          positions = [\n            newPosition,\n            ...this.linear_recursive_scan(\n              tile_position,\n              side,\n              column_change,\n              row_change,\n              limit,\n              count\n            ),\n          ];\n        } else if (tile.piece?.side !== next_tile.piece.side) {\n          if (tile.piece?.type === \"pawn\") {\n            return positions;\n          } else {\n            positions = [\n              newPosition,\n              ...this.linear_recursive_scan(\n                tile_position,\n                side,\n                column_change,\n                row_change,\n                count,\n                count\n              ),\n            ];\n          }\n        }\n      }\n    }\n\n    return positions;\n  };\n\n  private linear_scan = (\n    { column, row }: ITilePosition,\n    side: string,\n    column_change: number,\n    row_change: number\n  ) => {\n    let positions: ITilePosition[] = [];\n\n    const new_column =\n      side === \"white\" ? column + column_change : column - column_change;\n    const new_row = side === \"white\" ? row + row_change : row - row_change;\n\n    const newPosition: ITilePosition = { column: new_column, row: new_row };\n\n    const is_out_of_bounds = this.position_is_out_of_bounds(newPosition);\n\n    if (!is_out_of_bounds) {\n      let tile = this.tiles[column][row];\n      let next_tile = this.tiles[newPosition.column][newPosition.row];\n\n      if (next_tile.piece === undefined) {\n        positions = [...positions, newPosition];\n      } else if (tile.piece?.side !== next_tile.piece.side) {\n        positions = [...positions, newPosition];\n      }\n    }\n\n    return positions;\n  };\n\n  private radial_scan = (\n    tile_position: ITilePosition,\n    side: string,\n    column_change: number,\n    row_change: number\n  ): ITilePosition[] => {\n    return [\n      ...this.linear_scan(tile_position, side, column_change, row_change),\n      ...this.linear_scan(tile_position, side, -column_change, -row_change),\n      ...this.linear_scan(tile_position, side, column_change, -row_change),\n      ...this.linear_scan(tile_position, side, -column_change, row_change),\n      ...this.linear_scan(tile_position, side, row_change, column_change),\n      ...this.linear_scan(tile_position, side, -row_change, -column_change),\n      ...this.linear_scan(tile_position, side, row_change, -column_change),\n      ...this.linear_scan(tile_position, side, -row_change, column_change),\n    ];\n  };\n\n  private position_is_out_of_bounds = ({\n    column,\n    row,\n  }: ITilePosition): boolean => {\n    if (column >= 8 || column < 0) {\n      return true;\n    } else if (row >= 8 || row < 0) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n}\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport Board from \"containers/Board\";\nimport { classic } from \"designs/pieces\";\nimport { BoardClass } from \"types/Board\";\n\nimport { BoardContext } from \"context/Board\";\n\nimport { io } from 'socket.io-client';\n\nfunction App() {\n  const board = new BoardClass(classic);\n\tconst socket = io({\n    reconnection: true,\n  reconnectionAttempts: Infinity,\n  reconnectionDelay: 1000,\n  reconnectionDelayMax: 5000,\n  randomizationFactor: 0.5,\n  timeout: 20000,\n  autoConnect: true,\n  rejectUnauthorized: false,\n  });\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <BoardContext.Provider value={board}>\n          <Board />\n        </BoardContext.Provider>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}